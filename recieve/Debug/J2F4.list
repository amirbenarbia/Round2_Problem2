
J2F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008608  08008608  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008610  08008610  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008614  08008614  00018614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008ac  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000093c  2000093c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c23e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417d  00000000  00000000  0003c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  00040480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e0  00000000  00000000  000419e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f83  00000000  00000000  00042dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da52  00000000  00000000  00068d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da940  00000000  00000000  00086795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001610d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bd4  00000000  00000000  00161128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085d4 	.word	0x080085d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080085d4 	.word	0x080085d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxCpltCallback>:
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	strcpy(temp,buffer+13);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <HAL_UART_RxCpltCallback+0x1c>)
 80004d6:	4619      	mov	r1, r3
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <HAL_UART_RxCpltCallback+0x20>)
 80004da:	f008 f865 	bl	80085a8 <strcpy>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000239 	.word	0x20000239
 80004ec:	20000240 	.word	0x20000240

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fd28 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f81c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f994 	bl	8000828 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000500:	f000 f8d4 	bl	80006ac <MX_I2C1_Init>
  MX_I2S3_Init();
 8000504:	f000 f900 	bl	8000708 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000508:	f000 f92e 	bl	8000768 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800050c:	f007 fc6a 	bl	8007de4 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f960 	bl	80007d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000514:	f000 f878 	bl	8000608 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive_IT(&huart3, &buffer, 19);
 8000518:	2213      	movs	r2, #19
 800051a:	4904      	ldr	r1, [pc, #16]	; (800052c <main+0x3c>)
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x40>)
 800051e:	f004 fd1d 	bl	8004f5c <HAL_UART_Receive_IT>
	  HAL_Delay(1000);
 8000522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000526:	f000 fd81 	bl	800102c <HAL_Delay>
	  HAL_UART_Receive_IT(&huart3, &buffer, 19);
 800052a:	e7f5      	b.n	8000518 <main+0x28>
 800052c:	2000022c 	.word	0x2000022c
 8000530:	200001e8 	.word	0x200001e8

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 ff38 	bl	80083b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fe20 	bl	8004200 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c6:	f000 fa2d 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 f881 	bl	80046f0 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f4:	f000 fa16 	bl	8000a24 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC1_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC1_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_ADC1_Init+0x98>)
 800066a:	f000 fd03 	bl	8001074 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 f9d6 	bl	8000a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000678:	2310      	movs	r3, #16
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC1_Init+0x98>)
 800068a:	f000 fe65 	bl	8001358 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 f9c6 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000ac 	.word	0x200000ac
 80006a4:	40012000 	.word	0x40012000
 80006a8:	0f000001 	.word	0x0f000001

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f002 ffa5 	bl	8003638 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f996 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000f4 	.word	0x200000f4
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_I2S3_Init+0x54>)
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <MX_I2S3_Init+0x58>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2S3_Init+0x54>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_I2S3_Init+0x54>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_I2S3_Init+0x54>)
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <MX_I2S3_Init+0x5c>)
 8000732:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_I2S3_Init+0x54>)
 8000748:	f003 f8ba 	bl	80038c0 <HAL_I2S_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000752:	f000 f967 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000148 	.word	0x20000148
 8000760:	40003c00 	.word	0x40003c00
 8000764:	00017700 	.word	0x00017700

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_SPI1_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_SPI1_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI1_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI1_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI1_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI1_Init+0x64>)
 80007ba:	f004 faf9 	bl	8004db0 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f92e 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000190 	.word	0x20000190
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART3_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART3_UART_Init+0x4c>)
 800080c:	f004 fb59 	bl	8004ec2 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f905 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001e8 	.word	0x200001e8
 8000824:	40004800 	.word	0x40004800

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b72      	ldr	r3, [pc, #456]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a71      	ldr	r2, [pc, #452]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a6a      	ldr	r2, [pc, #424]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a63      	ldr	r2, [pc, #396]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a5c      	ldr	r2, [pc, #368]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a4e      	ldr	r2, [pc, #312]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	4849      	ldr	r0, [pc, #292]	; (8000a10 <MX_GPIO_Init+0x1e8>)
 80008ec:	f001 fa9c 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	4847      	ldr	r0, [pc, #284]	; (8000a14 <MX_GPIO_Init+0x1ec>)
 80008f6:	f001 fa97 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	2200      	movs	r2, #0
 80008fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <MX_GPIO_Init+0x1f0>)
 8000902:	f001 fa91 	bl	8001e28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	483c      	ldr	r0, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x1e8>)
 800091e:	f001 f8e7 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4836      	ldr	r0, [pc, #216]	; (8000a14 <MX_GPIO_Init+0x1ec>)
 800093a:	f001 f8d9 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482e      	ldr	r0, [pc, #184]	; (8000a14 <MX_GPIO_Init+0x1ec>)
 800095a:	f001 f8c9 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000962:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x1f4>)
 8000974:	f001 f8bc 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000978:	2304      	movs	r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x1f8>)
 800098c:	f001 f8b0 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x1f8>)
 80009ae:	f001 f89f 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_GPIO_Init+0x1f0>)
 80009cc:	f001 f890 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_GPIO_Init+0x1f0>)
 80009e4:	f001 f884 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_GPIO_Init+0x1e8>)
 80009fe:	f001 f877 	bl	8001af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a6e:	2007      	movs	r0, #7
 8000a70:	f000 ff6a 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_ADC_MspInit+0x48>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d115      	bne.n	8000abe <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_ADC_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <HAL_ADC_MspInit+0x4c>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_ADC_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2012      	movs	r0, #18
 8000ab4:	f000 ff53 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ab8:	2012      	movs	r0, #18
 8000aba:	f000 ff6c 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40012000 	.word	0x40012000
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_I2C_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12c      	bne.n	8000b4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b14:	2312      	movs	r3, #18
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	2304      	movs	r3, #4
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <HAL_I2C_MspInit+0x8c>)
 8000b2c:	f000 ffe0 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a31      	ldr	r2, [pc, #196]	; (8000c50 <HAL_I2S_MspInit+0xf0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d15a      	bne.n	8000c46 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ffc5 	bl	8004b30 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bac:	f7ff ff3a 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c04:	2310      	movs	r3, #16
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c14:	2306      	movs	r3, #6
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <HAL_I2S_MspInit+0xf8>)
 8000c20:	f000 ff66 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c24:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c36:	2306      	movs	r3, #6
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_I2S_MspInit+0xfc>)
 8000c42:	f000 ff55 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3738      	adds	r7, #56	; 0x38
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40003c00 	.word	0x40003c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_SPI_MspInit+0x8c>)
 8000cd6:	f000 ff0b 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <HAL_UART_MspInit+0xd4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d153      	bne.n	8000dba <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0xd8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <HAL_UART_MspInit+0xdc>)
 8000d84:	f000 feb4 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <HAL_UART_MspInit+0xe0>)
 8000da6:	f000 fea3 	bl	8001af0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2100      	movs	r1, #0
 8000dae:	2027      	movs	r0, #39	; 0x27
 8000db0:	f000 fdd5 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000db4:	2027      	movs	r0, #39	; 0x27
 8000db6:	f000 fdee 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f8e4 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <ADC_IRQHandler+0x10>)
 8000e2e:	f000 f964 	bl	80010fa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000ac 	.word	0x200000ac

08000e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART3_IRQHandler+0x10>)
 8000e42:	f004 f8bb 	bl	8004fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001e8 	.word	0x200001e8

08000e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <OTG_FS_IRQHandler+0x10>)
 8000e56:	f001 fa6b 	bl	8002330 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000628 	.word	0x20000628

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f007 fa56 	bl	8008344 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20020000 	.word	0x20020000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000244 	.word	0x20000244
 8000ecc:	20000940 	.word	0x20000940

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff ffd7 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f007 fa15 	bl	8008350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fae3 	bl	80004f0 <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f38:	08008618 	.word	0x08008618
  ldr r2, =_sbss
 8000f3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f40:	2000093c 	.word	0x2000093c

08000f44 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <CAN1_RX0_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fce9 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fd58 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fd01 	bl	80019b2 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 fcc9 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	20000248 	.word	0x20000248

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000248 	.word	0x20000248

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e033      	b.n	80010f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fcf4 	bl	8000a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d118      	bne.n	80010e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ba:	f023 0302 	bic.w	r3, r3, #2
 80010be:	f043 0202 	orr.w	r2, r3, #2
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fa68 	bl	800159c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
 80010e2:	e001      	b.n	80010e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d049      	beq.n	80011c4 <HAL_ADC_IRQHandler+0xca>
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d046      	beq.n	80011c4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d12b      	bne.n	80011b4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001160:	2b00      	cmp	r3, #0
 8001162:	d127      	bne.n	80011b4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800117c:	2b00      	cmp	r3, #0
 800117e:	d119      	bne.n	80011b4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0220 	bic.w	r2, r2, #32
 800118e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f8b0 	bl	800131a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f06f 0212 	mvn.w	r2, #18
 80011c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d057      	beq.n	800128a <HAL_ADC_IRQHandler+0x190>
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d054      	beq.n	800128a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d139      	bne.n	800127a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800121e:	2b00      	cmp	r3, #0
 8001220:	d12b      	bne.n	800127a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800122c:	2b00      	cmp	r3, #0
 800122e:	d124      	bne.n	800127a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800123a:	2b00      	cmp	r3, #0
 800123c:	d11d      	bne.n	800127a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001242:	2b00      	cmp	r3, #0
 8001244:	d119      	bne.n	800127a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001254:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d105      	bne.n	800127a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fa8a 	bl	8001794 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f06f 020c 	mvn.w	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001298:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d017      	beq.n	80012d0 <HAL_ADC_IRQHandler+0x1d6>
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d014      	beq.n	80012d0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d10d      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f834 	bl	800132e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f06f 0201 	mvn.w	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012de:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d015      	beq.n	8001312 <HAL_ADC_IRQHandler+0x218>
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d012      	beq.n	8001312 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f043 0202 	orr.w	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f06f 0220 	mvn.w	r2, #32
 8001300:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f81d 	bl	8001342 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f06f 0220 	mvn.w	r2, #32
 8001310:	601a      	str	r2, [r3, #0]
  }
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1c>
 8001370:	2302      	movs	r3, #2
 8001372:	e105      	b.n	8001580 <HAL_ADC_ConfigChannel+0x228>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b09      	cmp	r3, #9
 8001382:	d925      	bls.n	80013d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68d9      	ldr	r1, [r3, #12]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	3b1e      	subs	r3, #30
 800139a:	2207      	movs	r2, #7
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68d9      	ldr	r1, [r3, #12]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	4603      	mov	r3, r0
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4403      	add	r3, r0
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	409a      	lsls	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e022      	b.n	8001416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6919      	ldr	r1, [r3, #16]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	2207      	movs	r2, #7
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6919      	ldr	r1, [r3, #16]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4403      	add	r3, r0
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d824      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b05      	subs	r3, #5
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b05      	subs	r3, #5
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
 8001466:	e04c      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d824      	bhi.n	80014ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b23      	subs	r3, #35	; 0x23
 8001482:	221f      	movs	r2, #31
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43da      	mvns	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	; 0x23
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
 80014b8:	e023      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b41      	subs	r3, #65	; 0x41
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b41      	subs	r3, #65	; 0x41
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_ADC_ConfigChannel+0x234>)
 8001504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_ADC_ConfigChannel+0x238>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d109      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1cc>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d105      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_ADC_ConfigChannel+0x238>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d123      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x21e>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b10      	cmp	r3, #16
 8001534:	d003      	beq.n	800153e <HAL_ADC_ConfigChannel+0x1e6>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b11      	cmp	r3, #17
 800153c:	d11b      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b10      	cmp	r3, #16
 8001550:	d111      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_ADC_ConfigChannel+0x23c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_ADC_ConfigChannel+0x240>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9a      	lsrs	r2, r3, #18
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001568:	e002      	b.n	8001570 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40012300 	.word	0x40012300
 8001590:	40012000 	.word	0x40012000
 8001594:	20000000 	.word	0x20000000
 8001598:	431bde83 	.word	0x431bde83

0800159c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a4:	4b79      	ldr	r3, [pc, #484]	; (800178c <ADC_Init+0x1f0>)
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	431a      	orrs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	021a      	lsls	r2, r3, #8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	4a58      	ldr	r2, [pc, #352]	; (8001790 <ADC_Init+0x1f4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00f      	b.n	800169a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0202 	bic.w	r2, r2, #2
 80016a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e1b      	ldrb	r3, [r3, #24]
 80016b4:	005a      	lsls	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	035a      	lsls	r2, r3, #13
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	e007      	b.n	8001710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	3b01      	subs	r3, #1
 800172c:	051a      	lsls	r2, r3, #20
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001752:	025a      	lsls	r2, r3, #9
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	029a      	lsls	r2, r3, #10
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40012300 	.word	0x40012300
 8001790:	0f000001 	.word	0x0f000001

08001794 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff3e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff31 	bl	800180c <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff fb1c 	bl	8001014 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d008      	beq.n	80019fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e052      	b.n	8001aa2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0216 	bic.w	r2, r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_DMA_Abort+0x62>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0208 	bic.w	r2, r2, #8
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e013      	b.n	8001a76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fae1 	bl	8001014 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d90c      	bls.n	8001a76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e015      	b.n	8001aa2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e4      	bne.n	8001a4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	223f      	movs	r2, #63	; 0x3f
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d004      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e00c      	b.n	8001ae2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2205      	movs	r2, #5
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e16b      	b.n	8001de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 815a 	bne.w	8001dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80b4 	beq.w	8001dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x314>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02b      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x318>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d025      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x31c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x320>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00e      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e00c      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e00a      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f ae90 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40021400 	.word	0x40021400
 8001e1c:	40021800 	.word	0x40021800
 8001e20:	40021c00 	.word	0x40021c00
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5c:	b08f      	sub	sp, #60	; 0x3c
 8001e5e:	af0a      	add	r7, sp, #40	; 0x28
 8001e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e054      	b.n	8001f16 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f006 f800 	bl	8007e8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fff2 	bl	8005e94 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	687e      	ldr	r6, [r7, #4]
 8001eb8:	466d      	mov	r5, sp
 8001eba:	f106 0410 	add.w	r4, r6, #16
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ece:	1d33      	adds	r3, r6, #4
 8001ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f003 ff6c 	bl	8005db0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 ffe9 	bl	8005eb6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	687e      	ldr	r6, [r7, #4]
 8001eec:	466d      	mov	r5, sp
 8001eee:	f106 0410 	add.w	r4, r6, #16
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f02:	1d33      	adds	r3, r6, #4
 8001f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f004 f972 	bl	80061f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f1e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f1e:	b590      	push	{r4, r7, lr}
 8001f20:	b089      	sub	sp, #36	; 0x24
 8001f22:	af04      	add	r7, sp, #16
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	4608      	mov	r0, r1
 8001f28:	4611      	mov	r1, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	70fb      	strb	r3, [r7, #3]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70bb      	strb	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_HCD_HC_Init+0x28>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e076      	b.n	8002034 <HAL_HCD_HC_Init+0x116>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	333d      	adds	r3, #61	; 0x3d
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3338      	adds	r3, #56	; 0x38
 8001f6e:	787a      	ldrb	r2, [r7, #1]
 8001f70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3340      	adds	r3, #64	; 0x40
 8001f80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f82:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3339      	adds	r3, #57	; 0x39
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	333f      	adds	r3, #63	; 0x3f
 8001fa4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001fa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	78ba      	ldrb	r2, [r7, #2]
 8001fae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb2:	b2d0      	uxtb	r0, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	333a      	adds	r3, #58	; 0x3a
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001fc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da09      	bge.n	8001fe0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	333b      	adds	r3, #59	; 0x3b
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e008      	b.n	8001ff2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	333b      	adds	r3, #59	; 0x3b
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	333c      	adds	r3, #60	; 0x3c
 8002000:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002004:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	787c      	ldrb	r4, [r7, #1]
 800200c:	78ba      	ldrb	r2, [r7, #2]
 800200e:	78f9      	ldrb	r1, [r7, #3]
 8002010:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002012:	9302      	str	r3, [sp, #8]
 8002014:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4623      	mov	r3, r4
 8002022:	f004 fa41 	bl	80064a8 <USB_HC_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}

0800203c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_HCD_HC_Halt+0x1e>
 8002056:	2302      	movs	r3, #2
 8002058:	e00f      	b.n	800207a <HAL_HCD_HC_Halt+0x3e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fc91 	bl	8006992 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	70fb      	strb	r3, [r7, #3]
 8002096:	460b      	mov	r3, r1
 8002098:	70bb      	strb	r3, [r7, #2]
 800209a:	4613      	mov	r3, r2
 800209c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	333b      	adds	r3, #59	; 0x3b
 80020ac:	78ba      	ldrb	r2, [r7, #2]
 80020ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	333f      	adds	r3, #63	; 0x3f
 80020be:	787a      	ldrb	r2, [r7, #1]
 80020c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020c2:	7c3b      	ldrb	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d112      	bne.n	80020ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3342      	adds	r3, #66	; 0x42
 80020d6:	2203      	movs	r2, #3
 80020d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	333d      	adds	r3, #61	; 0x3d
 80020e8:	7f3a      	ldrb	r2, [r7, #28]
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	e008      	b.n	8002100 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3342      	adds	r3, #66	; 0x42
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b03      	cmp	r3, #3
 8002104:	f200 80c6 	bhi.w	8002294 <HAL_HCD_HC_SubmitRequest+0x210>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002121 	.word	0x08002121
 8002114:	08002281 	.word	0x08002281
 8002118:	08002185 	.word	0x08002185
 800211c:	08002203 	.word	0x08002203
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002120:	7c3b      	ldrb	r3, [r7, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	f040 80b8 	bne.w	8002298 <HAL_HCD_HC_SubmitRequest+0x214>
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80b4 	bne.w	8002298 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002130:	8b3b      	ldrh	r3, [r7, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3355      	adds	r3, #85	; 0x55
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3355      	adds	r3, #85	; 0x55
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3342      	adds	r3, #66	; 0x42
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800216e:	e093      	b.n	8002298 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3342      	adds	r3, #66	; 0x42
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	e089      	b.n	8002298 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002184:	78bb      	ldrb	r3, [r7, #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11d      	bne.n	80021c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3355      	adds	r3, #85	; 0x55
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3342      	adds	r3, #66	; 0x42
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021b0:	e073      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3342      	adds	r3, #66	; 0x42
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
      break;
 80021c4:	e069      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3354      	adds	r3, #84	; 0x54
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3342      	adds	r3, #66	; 0x42
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
      break;
 80021ec:	e055      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3342      	adds	r3, #66	; 0x42
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      break;
 8002200:	e04b      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002202:	78bb      	ldrb	r3, [r7, #2]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11d      	bne.n	8002244 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3355      	adds	r3, #85	; 0x55
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3342      	adds	r3, #66	; 0x42
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800222e:	e034      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3342      	adds	r3, #66	; 0x42
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	e02a      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3354      	adds	r3, #84	; 0x54
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3342      	adds	r3, #66	; 0x42
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
      break;
 800226a:	e016      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3342      	adds	r3, #66	; 0x42
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
      break;
 800227e:	e00c      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3342      	adds	r3, #66	; 0x42
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
      break;
 8002292:	e002      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002294:	bf00      	nop
 8002296:	e000      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002298:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3344      	adds	r3, #68	; 0x44
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	8b3a      	ldrh	r2, [r7, #24]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	202c      	movs	r0, #44	; 0x2c
 80022b4:	fb00 f303 	mul.w	r3, r0, r3
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	; 0x4c
 80022bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3360      	adds	r3, #96	; 0x60
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3350      	adds	r3, #80	; 0x50
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3339      	adds	r3, #57	; 0x39
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3361      	adds	r3, #97	; 0x61
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	222c      	movs	r2, #44	; 0x2c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	3338      	adds	r3, #56	; 0x38
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	18d1      	adds	r1, r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	f004 f9e4 	bl	80066ec <USB_HC_StartXfer>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop

08002330 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 ff0f 	bl	800616a <USB_GetMode>
 800234c:	4603      	mov	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 80f6 	bne.w	8002540 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f003 fef3 	bl	8006144 <USB_ReadInterrupts>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80ec 	beq.w	800253e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 feea 	bl	8006144 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800237a:	d104      	bne.n	8002386 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002384:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 feda 	bl	8006144 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800239a:	d104      	bne.n	80023a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 feca 	bl	8006144 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ba:	d104      	bne.n	80023c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 feba 	bl	8006144 <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d103      	bne.n	80023e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 feac 	bl	8006144 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f6:	d11c      	bne.n	8002432 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002400:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002412:	2110      	movs	r1, #16
 8002414:	6938      	ldr	r0, [r7, #16]
 8002416:	f003 fd9b 	bl	8005f50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800241a:	6938      	ldr	r0, [r7, #16]
 800241c:	f003 fdcc 	bl	8005fb8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f003 ffa2 	bl	8006370 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f005 fdab 	bl	8007f88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fe84 	bl	8006144 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002442:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002446:	d102      	bne.n	800244e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f001 f882 	bl	8003552 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fe76 	bl	8006144 <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b08      	cmp	r3, #8
 8002460:	d106      	bne.n	8002470 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f005 fd74 	bl	8007f50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2208      	movs	r2, #8
 800246e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fe65 	bl	8006144 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b10      	cmp	r3, #16
 8002482:	d101      	bne.n	8002488 <HAL_HCD_IRQHandler+0x158>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_HCD_IRQHandler+0x15a>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0210 	bic.w	r2, r2, #16
 800249c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 ff85 	bl	80033ae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0210 	orr.w	r2, r2, #16
 80024b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fe43 	bl	8006144 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c8:	d13a      	bne.n	8002540 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 fa4e 	bl	8006970 <USB_HC_ReadInterrupt>
 80024d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e025      	b.n	8002528 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d018      	beq.n	8002522 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002506:	d106      	bne.n	8002516 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f88f 	bl	8002632 <HCD_HC_IN_IRQHandler>
 8002514:	e005      	b.n	8002522 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fbdd 	bl	8002cdc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3d4      	bcc.n	80024dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	e000      	b.n	8002540 <HAL_HCD_IRQHandler+0x210>
      return;
 800253e:	bf00      	nop
    }
  }
}
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_HCD_Start+0x16>
 8002558:	2302      	movs	r3, #2
 800255a:	e013      	b.n	8002584 <HAL_HCD_Start+0x3e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f003 ff3a 	bl	80063e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fc7c 	bl	8005e72 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_HCD_Stop+0x16>
 800259e:	2302      	movs	r3, #2
 80025a0:	e00d      	b.n	80025be <HAL_HCD_Stop+0x32>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fb28 	bl	8006c04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	781b      	ldrb	r3, [r3, #0]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3350      	adds	r3, #80	; 0x50
 8002608:	681b      	ldr	r3, [r3, #0]
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 ff2e 	bl	8006484 <USB_GetCurrentFrame>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	d11a      	bne.n	8002698 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	2304      	movs	r3, #4
 8002672:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3361      	adds	r3, #97	; 0x61
 8002682:	2206      	movs	r2, #6
 8002684:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f004 f97e 	bl	8006992 <USB_HC_Halt>
 8002696:	e0af      	b.n	80027f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d11b      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3361      	adds	r3, #97	; 0x61
 80026d2:	2207      	movs	r2, #7
 80026d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 f956 	bl	8006992 <USB_HC_Halt>
 80026e6:	e087      	b.n	80027f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d109      	bne.n	8002712 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	461a      	mov	r2, r3
 800270c:	2320      	movs	r3, #32
 800270e:	6093      	str	r3, [r2, #8]
 8002710:	e072      	b.n	80027f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d11a      	bne.n	800275e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2308      	movs	r3, #8
 8002738:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3361      	adds	r3, #97	; 0x61
 8002748:	2205      	movs	r2, #5
 800274a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f91b 	bl	8006992 <USB_HC_Halt>
 800275c:	e04c      	b.n	80027f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002774:	d11b      	bne.n	80027ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002788:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3361      	adds	r3, #97	; 0x61
 8002798:	2208      	movs	r2, #8
 800279a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f8f3 	bl	8006992 <USB_HC_Halt>
 80027ac:	e024      	b.n	80027f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d119      	bne.n	80027f8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3361      	adds	r3, #97	; 0x61
 80027e4:	2206      	movs	r2, #6
 80027e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 f8cd 	bl	8006992 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280e:	d112      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f004 f8b9 	bl	8006992 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002832:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002834:	e24e      	b.n	8002cd4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 80df 	bne.w	8002a0c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d019      	beq.n	800288a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3348      	adds	r3, #72	; 0x48
 8002864:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0159      	lsls	r1, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	440b      	add	r3, r1
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	202c      	movs	r0, #44	; 0x2c
 8002880:	fb00 f303 	mul.w	r3, r0, r3
 8002884:	440b      	add	r3, r1
 8002886:	3350      	adds	r3, #80	; 0x50
 8002888:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3361      	adds	r3, #97	; 0x61
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	335c      	adds	r3, #92	; 0x5c
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	461a      	mov	r2, r3
 80028bc:	2301      	movs	r3, #1
 80028be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	333f      	adds	r3, #63	; 0x3f
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	333f      	adds	r3, #63	; 0x3f
 80028e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d111      	bne.n	800290c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 f84d 	bl	8006992 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
 800290a:	e03a      	b.n	8002982 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	333f      	adds	r3, #63	; 0x3f
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d009      	beq.n	8002934 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002930:	2b01      	cmp	r3, #1
 8002932:	d126      	bne.n	8002982 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	440a      	add	r2, r1
 800294a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002952:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	b2d9      	uxtb	r1, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	202c      	movs	r0, #44	; 0x2c
 8002970:	fb00 f303 	mul.w	r3, r0, r3
 8002974:	4413      	add	r3, r2
 8002976:	3360      	adds	r3, #96	; 0x60
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f005 fb11 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d12b      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3348      	adds	r3, #72	; 0x48
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	202c      	movs	r0, #44	; 0x2c
 80029a0:	fb00 f202 	mul.w	r2, r0, r2
 80029a4:	440a      	add	r2, r1
 80029a6:	3240      	adds	r2, #64	; 0x40
 80029a8:	8812      	ldrh	r2, [r2, #0]
 80029aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 818e 	beq.w	8002cd4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3354      	adds	r3, #84	; 0x54
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2d8      	uxtb	r0, r3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3354      	adds	r3, #84	; 0x54
 80029dc:	4602      	mov	r2, r0
 80029de:	701a      	strb	r2, [r3, #0]
}
 80029e0:	e178      	b.n	8002cd4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3354      	adds	r3, #84	; 0x54
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2d8      	uxtb	r0, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3354      	adds	r3, #84	; 0x54
 8002a06:	4602      	mov	r2, r0
 8002a08:	701a      	strb	r2, [r3, #0]
}
 8002a0a:	e163      	b.n	8002cd4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f040 80f6 	bne.w	8002c10 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d109      	bne.n	8002a4c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e0c9      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3361      	adds	r3, #97	; 0x61
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d109      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3360      	adds	r3, #96	; 0x60
 8002a6e:	2205      	movs	r2, #5
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e0b5      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d009      	beq.n	8002a9c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d150      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	335c      	adds	r3, #92	; 0x5c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	202c      	movs	r0, #44	; 0x2c
 8002ab4:	fb00 f303 	mul.w	r3, r0, r3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d912      	bls.n	8002af8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2204      	movs	r2, #4
 8002af4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af6:	e073      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3360      	adds	r3, #96	; 0x60
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b20:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b28:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b3c:	e050      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3361      	adds	r3, #97	; 0x61
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d122      	bne.n	8002b98 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3360      	adds	r3, #96	; 0x60
 8002b60:	2202      	movs	r2, #2
 8002b62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e023      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b07      	cmp	r3, #7
 8002baa:	d119      	bne.n	8002be0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	335c      	adds	r3, #92	; 0x5c
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	fb00 f303 	mul.w	r3, r0, r3
 8002bc8:	440b      	add	r3, r1
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3360      	adds	r3, #96	; 0x60
 8002bdc:	2204      	movs	r2, #4
 8002bde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2302      	movs	r3, #2
 8002bf0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	b2d9      	uxtb	r1, r3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	202c      	movs	r0, #44	; 0x2c
 8002bfc:	fb00 f303 	mul.w	r3, r0, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f005 f9cb 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c0e:	e061      	b.n	8002cd4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d156      	bne.n	8002cd4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	333f      	adds	r3, #63	; 0x3f
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d111      	bne.n	8002c5e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fe9b 	bl	8006992 <USB_HC_Halt>
 8002c5c:	e031      	b.n	8002cc2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	333f      	adds	r3, #63	; 0x3f
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	333f      	adds	r3, #63	; 0x3f
 8002c80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d11d      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	335c      	adds	r3, #92	; 0x5c
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3361      	adds	r3, #97	; 0x61
 8002cae:	2203      	movs	r2, #3
 8002cb0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fe68 	bl	8006992 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	6093      	str	r3, [r2, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11a      	bne.n	8002d42 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3361      	adds	r3, #97	; 0x61
 8002d2c:	2206      	movs	r2, #6
 8002d2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 fe29 	bl	8006992 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d40:	e331      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d12e      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	461a      	mov	r2, r3
 8002d66:	2320      	movs	r3, #32
 8002d68:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	333d      	adds	r3, #61	; 0x3d
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f040 8313 	bne.w	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	333d      	adds	r3, #61	; 0x3d
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3360      	adds	r3, #96	; 0x60
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fdef 	bl	8006992 <USB_HC_Halt>
}
 8002db4:	e2f7      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dcc:	d112      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fdd0 	bl	8006992 <USB_HC_Halt>
}
 8002df2:	e2d8      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d140      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d111      	bne.n	8002e56 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333d      	adds	r3, #61	; 0x3d
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2340      	movs	r3, #64	; 0x40
 8002e54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	2301      	movs	r3, #1
 8002e66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3361      	adds	r3, #97	; 0x61
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fd84 	bl	8006992 <USB_HC_Halt>
}
 8002e8a:	e28c      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d12c      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	333d      	adds	r3, #61	; 0x3d
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 fd55 	bl	8006992 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	6093      	str	r3, [r2, #8]
}
 8002efa:	e254      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11a      	bne.n	8002f48 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2308      	movs	r3, #8
 8002f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3361      	adds	r3, #97	; 0x61
 8002f32:	2205      	movs	r2, #5
 8002f34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fd26 	bl	8006992 <USB_HC_Halt>
}
 8002f46:	e22e      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d140      	bne.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	335c      	adds	r3, #92	; 0x5c
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3361      	adds	r3, #97	; 0x61
 8002f7e:	2203      	movs	r2, #3
 8002f80:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	333d      	adds	r3, #61	; 0x3d
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d112      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	333c      	adds	r3, #60	; 0x3c
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	333d      	adds	r3, #61	; 0x3d
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f003 fce3 	bl	8006992 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2310      	movs	r3, #16
 8002fdc:	6093      	str	r3, [r2, #8]
}
 8002fde:	e1e2      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d164      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d111      	bne.n	8003022 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3361      	adds	r3, #97	; 0x61
 800300c:	2206      	movs	r2, #6
 800300e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fcb9 	bl	8006992 <USB_HC_Halt>
 8003020:	e044      	b.n	80030ac <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	335c      	adds	r3, #92	; 0x5c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	202c      	movs	r0, #44	; 0x2c
 800303a:	fb00 f303 	mul.w	r3, r0, r3
 800303e:	440b      	add	r3, r1
 8003040:	335c      	adds	r3, #92	; 0x5c
 8003042:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	335c      	adds	r3, #92	; 0x5c
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d920      	bls.n	800309a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	335c      	adds	r3, #92	; 0x5c
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3360      	adds	r3, #96	; 0x60
 8003078:	2204      	movs	r2, #4
 800307a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b2d9      	uxtb	r1, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	202c      	movs	r0, #44	; 0x2c
 8003086:	fb00 f303 	mul.w	r3, r0, r3
 800308a:	4413      	add	r3, r2
 800308c:	3360      	adds	r3, #96	; 0x60
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f004 ff86 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003098:	e008      	b.n	80030ac <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	6093      	str	r3, [r2, #8]
}
 80030be:	e172      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d6:	d11b      	bne.n	8003110 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3361      	adds	r3, #97	; 0x61
 80030e6:	2208      	movs	r2, #8
 80030e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fc4c 	bl	8006992 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310c:	6093      	str	r3, [r2, #8]
}
 800310e:	e14a      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	f040 813f 	bne.w	80033a6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d17d      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3360      	adds	r3, #96	; 0x60
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	333f      	adds	r3, #63	; 0x3f
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d00a      	beq.n	8003178 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	333f      	adds	r3, #63	; 0x3f
 8003170:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	f040 8100 	bne.w	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d113      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3355      	adds	r3, #85	; 0x55
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2d8      	uxtb	r0, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3355      	adds	r3, #85	; 0x55
 80031a4:	4602      	mov	r2, r0
 80031a6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 80e3 	bne.w	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	334c      	adds	r3, #76	; 0x4c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80d8 	beq.w	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	334c      	adds	r3, #76	; 0x4c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	202c      	movs	r0, #44	; 0x2c
 80031de:	fb00 f202 	mul.w	r2, r0, r2
 80031e2:	440a      	add	r2, r1
 80031e4:	3240      	adds	r2, #64	; 0x40
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	4413      	add	r3, r2
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	202c      	movs	r0, #44	; 0x2c
 80031f2:	fb00 f202 	mul.w	r2, r0, r2
 80031f6:	440a      	add	r2, r1
 80031f8:	3240      	adds	r2, #64	; 0x40
 80031fa:	8812      	ldrh	r2, [r2, #0]
 80031fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b5 	beq.w	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3355      	adds	r3, #85	; 0x55
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	f083 0301 	eor.w	r3, r3, #1
 8003222:	b2d8      	uxtb	r0, r3
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3355      	adds	r3, #85	; 0x55
 8003232:	4602      	mov	r2, r0
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e09f      	b.n	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3361      	adds	r3, #97	; 0x61
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d109      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3360      	adds	r3, #96	; 0x60
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e08b      	b.n	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3361      	adds	r3, #97	; 0x61
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d109      	bne.n	8003288 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3360      	adds	r3, #96	; 0x60
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e077      	b.n	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3361      	adds	r3, #97	; 0x61
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d109      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3360      	adds	r3, #96	; 0x60
 80032aa:	2205      	movs	r2, #5
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e063      	b.n	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d009      	beq.n	80032d8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3361      	adds	r3, #97	; 0x61
 80032d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d14f      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	335c      	adds	r3, #92	; 0x5c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	202c      	movs	r0, #44	; 0x2c
 80032f0:	fb00 f303 	mul.w	r3, r0, r3
 80032f4:	440b      	add	r3, r1
 80032f6:	335c      	adds	r3, #92	; 0x5c
 80032f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	335c      	adds	r3, #92	; 0x5c
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d912      	bls.n	8003334 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	335c      	adds	r3, #92	; 0x5c
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3360      	adds	r3, #96	; 0x60
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e021      	b.n	8003378 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3360      	adds	r3, #96	; 0x60
 8003342:	2202      	movs	r2, #2
 8003344:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800335c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003364:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	461a      	mov	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	2302      	movs	r3, #2
 8003388:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	b2d9      	uxtb	r1, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	202c      	movs	r0, #44	; 0x2c
 8003394:	fb00 f303 	mul.w	r3, r0, r3
 8003398:	4413      	add	r3, r2
 800339a:	3360      	adds	r3, #96	; 0x60
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f004 fdff 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033a6:	bf00      	nop
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b08a      	sub	sp, #40	; 0x28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	0c5b      	lsrs	r3, r3, #17
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d004      	beq.n	80033f4 <HCD_RXQLVL_IRQHandler+0x46>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	f000 80a9 	beq.w	8003544 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033f2:	e0aa      	b.n	800354a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a6 	beq.w	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3344      	adds	r3, #68	; 0x44
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 809b 	beq.w	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3350      	adds	r3, #80	; 0x50
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	441a      	add	r2, r3
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	202c      	movs	r0, #44	; 0x2c
 800342c:	fb00 f303 	mul.w	r3, r0, r3
 8003430:	440b      	add	r3, r1
 8003432:	334c      	adds	r3, #76	; 0x4c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d87a      	bhi.n	8003530 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3344      	adds	r3, #68	; 0x44
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	b292      	uxth	r2, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f002 fe1e 	bl	8006094 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3344      	adds	r3, #68	; 0x44
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	441a      	add	r2, r3
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	202c      	movs	r0, #44	; 0x2c
 8003472:	fb00 f303 	mul.w	r3, r0, r3
 8003476:	440b      	add	r3, r1
 8003478:	3344      	adds	r3, #68	; 0x44
 800347a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3350      	adds	r3, #80	; 0x50
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	441a      	add	r2, r3
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	202c      	movs	r0, #44	; 0x2c
 8003496:	fb00 f303 	mul.w	r3, r0, r3
 800349a:	440b      	add	r3, r1
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	0cdb      	lsrs	r3, r3, #19
 80034b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3340      	adds	r3, #64	; 0x40
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d13c      	bne.n	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d039      	beq.n	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3354      	adds	r3, #84	; 0x54
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3354      	adds	r3, #84	; 0x54
 800352a:	4602      	mov	r2, r0
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e00b      	b.n	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3360      	adds	r3, #96	; 0x60
 800353e:	2204      	movs	r2, #4
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e001      	b.n	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003548:	bf00      	nop
  }
}
 800354a:	bf00      	nop
 800354c:	3728      	adds	r7, #40	; 0x28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800357e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d10b      	bne.n	80035a2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d102      	bne.n	800359a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f004 fce9 	bl	8007f6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d132      	bne.n	8003612 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d126      	bne.n	800360c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d113      	bne.n	80035ee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d0:	d106      	bne.n	80035e0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2102      	movs	r1, #2
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 fec9 	bl	8006370 <USB_InitFSLSPClkSel>
 80035de:	e011      	b.n	8003604 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fec2 	bl	8006370 <USB_InitFSLSPClkSel>
 80035ec:	e00a      	b.n	8003604 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d106      	bne.n	8003604 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035fc:	461a      	mov	r2, r3
 80035fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003602:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f004 fcdb 	bl	8007fc0 <HAL_HCD_PortEnabled_Callback>
 800360a:	e002      	b.n	8003612 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f004 fce5 	bl	8007fdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d103      	bne.n	8003624 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f043 0320 	orr.w	r3, r3, #32
 8003622:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e12b      	b.n	80038a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fa36 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800368a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800369a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800369c:	f001 fa20 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 80036a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a81      	ldr	r2, [pc, #516]	; (80038ac <HAL_I2C_Init+0x274>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d807      	bhi.n	80036bc <HAL_I2C_Init+0x84>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a80      	ldr	r2, [pc, #512]	; (80038b0 <HAL_I2C_Init+0x278>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e006      	b.n	80036ca <HAL_I2C_Init+0x92>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a7d      	ldr	r2, [pc, #500]	; (80038b4 <HAL_I2C_Init+0x27c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0e7      	b.n	80038a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a78      	ldr	r2, [pc, #480]	; (80038b8 <HAL_I2C_Init+0x280>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0c9b      	lsrs	r3, r3, #18
 80036dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_I2C_Init+0x274>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d802      	bhi.n	800370c <HAL_I2C_Init+0xd4>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	3301      	adds	r3, #1
 800370a:	e009      	b.n	8003720 <HAL_I2C_Init+0xe8>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	4a69      	ldr	r2, [pc, #420]	; (80038bc <HAL_I2C_Init+0x284>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	3301      	adds	r3, #1
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	430b      	orrs	r3, r1
 8003726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	495c      	ldr	r1, [pc, #368]	; (80038ac <HAL_I2C_Init+0x274>)
 800373c:	428b      	cmp	r3, r1
 800373e:	d819      	bhi.n	8003774 <HAL_I2C_Init+0x13c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1e59      	subs	r1, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fbb1 f3f3 	udiv	r3, r1, r3
 800374e:	1c59      	adds	r1, r3, #1
 8003750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003754:	400b      	ands	r3, r1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_I2C_Init+0x138>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1e59      	subs	r1, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fbb1 f3f3 	udiv	r3, r1, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376e:	e051      	b.n	8003814 <HAL_I2C_Init+0x1dc>
 8003770:	2304      	movs	r3, #4
 8003772:	e04f      	b.n	8003814 <HAL_I2C_Init+0x1dc>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d111      	bne.n	80037a0 <HAL_I2C_Init+0x168>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	440b      	add	r3, r1
 800378a:	fbb0 f3f3 	udiv	r3, r0, r3
 800378e:	3301      	adds	r3, #1
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e012      	b.n	80037c6 <HAL_I2C_Init+0x18e>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	0099      	lsls	r1, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Init+0x196>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e022      	b.n	8003814 <HAL_I2C_Init+0x1dc>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10e      	bne.n	80037f4 <HAL_I2C_Init+0x1bc>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1e58      	subs	r0, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	440b      	add	r3, r1
 80037e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f2:	e00f      	b.n	8003814 <HAL_I2C_Init+0x1dc>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1e58      	subs	r0, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	0099      	lsls	r1, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	6809      	ldr	r1, [r1, #0]
 8003818:	4313      	orrs	r3, r2
 800381a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6911      	ldr	r1, [r2, #16]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68d2      	ldr	r2, [r2, #12]
 800384e:	4311      	orrs	r1, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	000186a0 	.word	0x000186a0
 80038b0:	001e847f 	.word	0x001e847f
 80038b4:	003d08ff 	.word	0x003d08ff
 80038b8:	431bde83 	.word	0x431bde83
 80038bc:	10624dd3 	.word	0x10624dd3

080038c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e128      	b.n	8003b24 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a90      	ldr	r2, [pc, #576]	; (8003b2c <HAL_I2S_Init+0x26c>)
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd f937 	bl	8000b60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003908:	f023 030f 	bic.w	r3, r3, #15
 800390c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2202      	movs	r2, #2
 8003914:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d060      	beq.n	80039e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003926:	2310      	movs	r3, #16
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e001      	b.n	8003930 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b20      	cmp	r3, #32
 8003936:	d802      	bhi.n	800393e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800393e:	2001      	movs	r0, #1
 8003940:	f001 f9d8 	bl	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003944:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394e:	d125      	bne.n	800399c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	3305      	adds	r3, #5
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	e01f      	b.n	80039ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	fbb2 f2f3 	udiv	r2, r2, r3
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	3305      	adds	r3, #5
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	e00e      	b.n	80039ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	3305      	adds	r3, #5
 80039b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4a5c      	ldr	r2, [pc, #368]	; (8003b30 <HAL_I2S_Init+0x270>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e003      	b.n	80039e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039e0:	2302      	movs	r3, #2
 80039e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d902      	bls.n	80039f4 <HAL_I2S_Init+0x134>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2bff      	cmp	r3, #255	; 0xff
 80039f2:	d907      	bls.n	8003a04 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e08f      	b.n	8003b24 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	ea42 0103 	orr.w	r1, r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a22:	f023 030f 	bic.w	r3, r3, #15
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6851      	ldr	r1, [r2, #4]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6892      	ldr	r2, [r2, #8]
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68d2      	ldr	r2, [r2, #12]
 8003a34:	4311      	orrs	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6992      	ldr	r2, [r2, #24]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a46:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d161      	bne.n	8003b14 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_I2S_Init+0x274>)
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <HAL_I2S_Init+0x278>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2S_Init+0x1a4>
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_I2S_Init+0x27c>)
 8003a62:	e001      	b.n	8003a68 <HAL_I2S_Init+0x1a8>
 8003a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	4932      	ldr	r1, [pc, #200]	; (8003b38 <HAL_I2S_Init+0x278>)
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2S_Init+0x1b8>
 8003a74:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <HAL_I2S_Init+0x27c>)
 8003a76:	e001      	b.n	8003a7c <HAL_I2S_Init+0x1bc>
 8003a78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a80:	f023 030f 	bic.w	r3, r3, #15
 8003a84:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2b      	ldr	r2, [pc, #172]	; (8003b38 <HAL_I2S_Init+0x278>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2S_Init+0x1d4>
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_I2S_Init+0x27c>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2S_Init+0x1d8>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	2202      	movs	r2, #2
 8003a9a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a25      	ldr	r2, [pc, #148]	; (8003b38 <HAL_I2S_Init+0x278>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2S_Init+0x1ea>
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_I2S_Init+0x27c>)
 8003aa8:	e001      	b.n	8003aae <HAL_I2S_Init+0x1ee>
 8003aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aba:	d003      	beq.n	8003ac4 <HAL_I2S_Init+0x204>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e001      	b.n	8003ad0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003afc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <HAL_I2S_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_I2S_Init+0x24c>
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <HAL_I2S_Init+0x27c>)
 8003b0a:	e001      	b.n	8003b10 <HAL_I2S_Init+0x250>
 8003b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b10:	897a      	ldrh	r2, [r7, #10]
 8003b12:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	08003c37 	.word	0x08003c37
 8003b30:	cccccccd 	.word	0xcccccccd
 8003b34:	08003d4d 	.word	0x08003d4d
 8003b38:	40003800 	.word	0x40003800
 8003b3c:	40003400 	.word	0x40003400

08003b40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	881a      	ldrh	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10e      	bne.n	8003bd0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ffb8 	bl	8003b40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	b292      	uxth	r2, r2
 8003bec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10e      	bne.n	8003c2e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff93 	bl	8003b54 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d13a      	bne.n	8003cc8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d109      	bne.n	8003c70 <I2S_IRQHandler+0x3a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d102      	bne.n	8003c70 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ffb4 	bl	8003bd8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d126      	bne.n	8003cc8 <I2S_IRQHandler+0x92>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d11f      	bne.n	8003cc8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f043 0202 	orr.w	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff50 	bl	8003b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d136      	bne.n	8003d42 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d109      	bne.n	8003cf2 <I2S_IRQHandler+0xbc>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b80      	cmp	r3, #128	; 0x80
 8003cea:	d102      	bne.n	8003cf2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff45 	bl	8003b7c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d122      	bne.n	8003d42 <I2S_IRQHandler+0x10c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d11b      	bne.n	8003d42 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d18:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff13 	bl	8003b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a92      	ldr	r2, [pc, #584]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d66:	4b92      	ldr	r3, [pc, #584]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d68:	e001      	b.n	8003d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a8b      	ldr	r2, [pc, #556]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d84:	4b8a      	ldr	r3, [pc, #552]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d86:	e001      	b.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d004      	beq.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 8099 	bne.w	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d107      	bne.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f925 	bl	8004008 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9c8 	bl	8004168 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d13a      	bne.n	8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d035      	beq.n	8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6e      	ldr	r2, [pc, #440]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003df6:	4b6e      	ldr	r3, [pc, #440]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df8:	e001      	b.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4969      	ldr	r1, [pc, #420]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d101      	bne.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e0a:	4b69      	ldr	r3, [pc, #420]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e0c:	e001      	b.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fe88 	bl	8003b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	f040 80c3 	bne.w	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80bd 	beq.w	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a49      	ldr	r2, [pc, #292]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8c:	e001      	b.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4944      	ldr	r1, [pc, #272]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9a:	428b      	cmp	r3, r1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eaa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f043 0204 	orr.w	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe4a 	bl	8003b68 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed4:	e089      	b.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d107      	bne.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8be 	bl	800406c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f8fd 	bl	8004104 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d12f      	bne.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02a      	beq.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f3a:	e001      	b.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4919      	ldr	r1, [pc, #100]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4e:	e001      	b.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f043 0202 	orr.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fdfa 	bl	8003b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d136      	bne.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d031      	beq.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4902      	ldr	r1, [pc, #8]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fa6:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa8:	e006      	b.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003faa:	bf00      	nop
 8003fac:	40003800 	.word	0x40003800
 8003fb0:	40003400 	.word	0x40003400
 8003fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fbc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fcc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fdc0 	bl	8003b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe8:	e000      	b.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fea:	bf00      	nop
}
 8003fec:	bf00      	nop
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c99      	adds	r1, r3, #2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6251      	str	r1, [r2, #36]	; 0x24
 800401a:	881a      	ldrh	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004048:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ffc9 	bl	8003ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c99      	adds	r1, r3, #2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6251      	str	r1, [r2, #36]	; 0x24
 800407e:	8819      	ldrh	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <I2SEx_TxISR_I2SExt+0x90>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <I2SEx_TxISR_I2SExt+0x22>
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <I2SEx_TxISR_I2SExt+0x94>)
 800408c:	e001      	b.n	8004092 <I2SEx_TxISR_I2SExt+0x26>
 800408e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004092:	460a      	mov	r2, r1
 8004094:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d121      	bne.n	80040f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <I2SEx_TxISR_I2SExt+0x90>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <I2SEx_TxISR_I2SExt+0x50>
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <I2SEx_TxISR_I2SExt+0x94>)
 80040ba:	e001      	b.n	80040c0 <I2SEx_TxISR_I2SExt+0x54>
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	490d      	ldr	r1, [pc, #52]	; (80040fc <I2SEx_TxISR_I2SExt+0x90>)
 80040c8:	428b      	cmp	r3, r1
 80040ca:	d101      	bne.n	80040d0 <I2SEx_TxISR_I2SExt+0x64>
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <I2SEx_TxISR_I2SExt+0x94>)
 80040ce:	e001      	b.n	80040d4 <I2SEx_TxISR_I2SExt+0x68>
 80040d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff81 	bl	8003ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40003800 	.word	0x40003800
 8004100:	40003400 	.word	0x40003400

08004104 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68d8      	ldr	r0, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	1c99      	adds	r1, r3, #2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800411c:	b282      	uxth	r2, r0
 800411e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d113      	bne.n	8004160 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004146:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff4a 	bl	8003ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <I2SEx_RxISR_I2SExt+0x90>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <I2SEx_RxISR_I2SExt+0x16>
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <I2SEx_RxISR_I2SExt+0x94>)
 800417c:	e001      	b.n	8004182 <I2SEx_RxISR_I2SExt+0x1a>
 800417e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004182:	68d8      	ldr	r0, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	1c99      	adds	r1, r3, #2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800418e:	b282      	uxth	r2, r0
 8004190:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <I2SEx_RxISR_I2SExt+0x90>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <I2SEx_RxISR_I2SExt+0x50>
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <I2SEx_RxISR_I2SExt+0x94>)
 80041b6:	e001      	b.n	80041bc <I2SEx_RxISR_I2SExt+0x54>
 80041b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	490d      	ldr	r1, [pc, #52]	; (80041f8 <I2SEx_RxISR_I2SExt+0x90>)
 80041c4:	428b      	cmp	r3, r1
 80041c6:	d101      	bne.n	80041cc <I2SEx_RxISR_I2SExt+0x64>
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <I2SEx_RxISR_I2SExt+0x94>)
 80041ca:	e001      	b.n	80041d0 <I2SEx_RxISR_I2SExt+0x68>
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff03 	bl	8003ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40003800 	.word	0x40003800
 80041fc:	40003400 	.word	0x40003400

08004200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e267      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d075      	beq.n	800430a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b04      	cmp	r3, #4
 8004228:	d00c      	beq.n	8004244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004232:	2b08      	cmp	r3, #8
 8004234:	d112      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b82      	ldr	r3, [pc, #520]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004242:	d10b      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	4b7e      	ldr	r3, [pc, #504]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05b      	beq.n	8004308 <HAL_RCC_OscConfig+0x108>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d157      	bne.n	8004308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e242      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d106      	bne.n	8004274 <HAL_RCC_OscConfig+0x74>
 8004266:	4b76      	ldr	r3, [pc, #472]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a75      	ldr	r2, [pc, #468]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e01d      	b.n	80042b0 <HAL_RCC_OscConfig+0xb0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x98>
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a6f      	ldr	r2, [pc, #444]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b6d      	ldr	r3, [pc, #436]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6c      	ldr	r2, [pc, #432]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0xb0>
 8004298:	4b69      	ldr	r3, [pc, #420]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a68      	ldr	r2, [pc, #416]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b66      	ldr	r3, [pc, #408]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a65      	ldr	r2, [pc, #404]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fc feac 	bl	8001014 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fc fea8 	bl	8001014 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e207      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b5b      	ldr	r3, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0xc0>
 80042de:	e014      	b.n	800430a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fc fe98 	bl	8001014 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fc fe94 	bl	8001014 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1f3      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fa:	4b51      	ldr	r3, [pc, #324]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0xe8>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d063      	beq.n	80043de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004316:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432a:	2b08      	cmp	r3, #8
 800432c:	d11c      	bne.n	8004368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b44      	ldr	r3, [pc, #272]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_RCC_OscConfig+0x152>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e1c7      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4937      	ldr	r1, [pc, #220]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	e03a      	b.n	80043de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004370:	4b34      	ldr	r3, [pc, #208]	; (8004444 <HAL_RCC_OscConfig+0x244>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fc fe4d 	bl	8001014 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437e:	f7fc fe49 	bl	8001014 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e1a8      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004390:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4925      	ldr	r1, [pc, #148]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
 80043b0:	e015      	b.n	80043de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <HAL_RCC_OscConfig+0x244>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fc fe2c 	bl	8001014 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fc fe28 	bl	8001014 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e187      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d036      	beq.n	8004458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_RCC_OscConfig+0x248>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc fe0c 	bl	8001014 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004400:	f7fc fe08 	bl	8001014 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e167      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x240>)
 8004414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x200>
 800441e:	e01b      	b.n	8004458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_OscConfig+0x248>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004426:	f7fc fdf5 	bl	8001014 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	e00e      	b.n	800444c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442e:	f7fc fdf1 	bl	8001014 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d907      	bls.n	800444c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e150      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
 8004440:	40023800 	.word	0x40023800
 8004444:	42470000 	.word	0x42470000
 8004448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444c:	4b88      	ldr	r3, [pc, #544]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ea      	bne.n	800442e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8097 	beq.w	8004594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446a:	4b81      	ldr	r3, [pc, #516]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	4b7d      	ldr	r3, [pc, #500]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a7c      	ldr	r2, [pc, #496]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
 8004486:	4b7a      	ldr	r3, [pc, #488]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4b77      	ldr	r3, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0x474>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a2:	4b74      	ldr	r3, [pc, #464]	; (8004674 <HAL_RCC_OscConfig+0x474>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a73      	ldr	r2, [pc, #460]	; (8004674 <HAL_RCC_OscConfig+0x474>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7fc fdb1 	bl	8001014 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7fc fdad 	bl	8001014 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e10c      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x474>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x2ea>
 80044dc:	4b64      	ldr	r3, [pc, #400]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a63      	ldr	r2, [pc, #396]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x324>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x30c>
 80044f2:	4b5f      	ldr	r3, [pc, #380]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a5e      	ldr	r2, [pc, #376]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
 80044fe:	4b5c      	ldr	r3, [pc, #368]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a5b      	ldr	r2, [pc, #364]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x324>
 800450c:	4b58      	ldr	r3, [pc, #352]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a57      	ldr	r2, [pc, #348]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a54      	ldr	r2, [pc, #336]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fc fd72 	bl	8001014 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fc fd6e 	bl	8001014 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0cb      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	4b49      	ldr	r3, [pc, #292]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ee      	beq.n	8004534 <HAL_RCC_OscConfig+0x334>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004558:	f7fc fd5c 	bl	8001014 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fc fd58 	bl	8001014 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0b5      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004576:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ee      	bne.n	8004560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b39      	ldr	r3, [pc, #228]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	4a38      	ldr	r2, [pc, #224]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a1 	beq.w	80046e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800459e:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d05c      	beq.n	8004664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d141      	bne.n	8004636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCC_OscConfig+0x478>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fc fd2c 	bl	8001014 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fc fd28 	bl	8001014 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e087      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d2:	4b27      	ldr	r3, [pc, #156]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	019b      	lsls	r3, r3, #6
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	3b01      	subs	r3, #1
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	491b      	ldr	r1, [pc, #108]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <HAL_RCC_OscConfig+0x478>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fc fd01 	bl	8001014 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fc fcfd 	bl	8001014 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e05c      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x416>
 8004634:	e054      	b.n	80046e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <HAL_RCC_OscConfig+0x478>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fc fcea 	bl	8001014 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fc fce6 	bl	8001014 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e045      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_OscConfig+0x470>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x444>
 8004662:	e03d      	b.n	80046e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e038      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
 8004670:	40023800 	.word	0x40023800
 8004674:	40007000 	.word	0x40007000
 8004678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_RCC_OscConfig+0x4ec>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d028      	beq.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d121      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d11a      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d111      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	3b01      	subs	r3, #1
 80046c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0cc      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b68      	ldr	r3, [pc, #416]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d90c      	bls.n	800472c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b65      	ldr	r3, [pc, #404]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b63      	ldr	r3, [pc, #396]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0b8      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004744:	4b59      	ldr	r3, [pc, #356]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a58      	ldr	r2, [pc, #352]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800475c:	4b53      	ldr	r3, [pc, #332]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a52      	ldr	r2, [pc, #328]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004768:	4b50      	ldr	r3, [pc, #320]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	494d      	ldr	r1, [pc, #308]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d044      	beq.n	8004810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	4b47      	ldr	r3, [pc, #284]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d119      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ae:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e06f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e067      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4934      	ldr	r1, [pc, #208]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e0:	f7fc fc18 	bl	8001014 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fc fc14 	bl	8001014 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e04f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 020c 	and.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	429a      	cmp	r2, r3
 800480e:	d1eb      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d20c      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e032      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4916      	ldr	r1, [pc, #88]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004876:	f000 f821 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800487a:	4602      	mov	r2, r0
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	490a      	ldr	r1, [pc, #40]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	5ccb      	ldrb	r3, [r1, r3]
 800488a:	fa22 f303 	lsr.w	r3, r2, r3
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fc fb78 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40023c00 	.word	0x40023c00
 80048ac:	40023800 	.word	0x40023800
 80048b0:	080085f0 	.word	0x080085f0
 80048b4:	20000000 	.word	0x20000000
 80048b8:	20000004 	.word	0x20000004

080048bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b094      	sub	sp, #80	; 0x50
 80048c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
 80048c8:	2300      	movs	r3, #0
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048cc:	2300      	movs	r3, #0
 80048ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d4:	4b79      	ldr	r3, [pc, #484]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d00d      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x40>
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	f200 80e1 	bhi.w	8004aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ee:	e0db      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b73      	ldr	r3, [pc, #460]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048f4:	e0db      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f6:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80048f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048fa:	e0d8      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	4b6f      	ldr	r3, [pc, #444]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d063      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004912:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	2200      	movs	r2, #0
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
 800491c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
 8004926:	2300      	movs	r3, #0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
 800492a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	0159      	lsls	r1, r3, #5
 800493c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004940:	0150      	lsls	r0, r2, #5
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4621      	mov	r1, r4
 8004948:	1a51      	subs	r1, r2, r1
 800494a:	6139      	str	r1, [r7, #16]
 800494c:	4629      	mov	r1, r5
 800494e:	eb63 0301 	sbc.w	r3, r3, r1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004960:	4659      	mov	r1, fp
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800496a:	4651      	mov	r1, sl
 800496c:	018a      	lsls	r2, r1, #6
 800496e:	4651      	mov	r1, sl
 8004970:	ebb2 0801 	subs.w	r8, r2, r1
 8004974:	4659      	mov	r1, fp
 8004976:	eb63 0901 	sbc.w	r9, r3, r1
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800498a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498e:	4690      	mov	r8, r2
 8004990:	4699      	mov	r9, r3
 8004992:	4623      	mov	r3, r4
 8004994:	eb18 0303 	adds.w	r3, r8, r3
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	462b      	mov	r3, r5
 800499c:	eb49 0303 	adc.w	r3, r9, r3
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ae:	4629      	mov	r1, r5
 80049b0:	024b      	lsls	r3, r1, #9
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049b8:	4621      	mov	r1, r4
 80049ba:	024a      	lsls	r2, r1, #9
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	2200      	movs	r2, #0
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049cc:	f7fb fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4613      	mov	r3, r2
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	e058      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	2200      	movs	r2, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	4611      	mov	r1, r2
 80049e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	f04f 0000 	mov.w	r0, #0
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	0159      	lsls	r1, r3, #5
 8004a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a06:	0150      	lsls	r0, r2, #5
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a12:	4649      	mov	r1, r9
 8004a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a30:	eb63 050b 	sbc.w	r5, r3, fp
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	00eb      	lsls	r3, r5, #3
 8004a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a42:	00e2      	lsls	r2, r4, #3
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	18e3      	adds	r3, r4, r3
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	464b      	mov	r3, r9
 8004a50:	eb45 0303 	adc.w	r3, r5, r3
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a62:	4629      	mov	r1, r5
 8004a64:	028b      	lsls	r3, r1, #10
 8004a66:	4621      	mov	r1, r4
 8004a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	028a      	lsls	r2, r1, #10
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a76:	2200      	movs	r2, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	61fa      	str	r2, [r7, #28]
 8004a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a80:	f7fb fba2 	bl	80001c8 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3750      	adds	r7, #80	; 0x50
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	00f42400 	.word	0x00f42400
 8004ac4:	007a1200 	.word	0x007a1200

08004ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000000 	.word	0x20000000

08004ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae4:	f7ff fff0 	bl	8004ac8 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	0a9b      	lsrs	r3, r3, #10
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4903      	ldr	r1, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	08008600 	.word	0x08008600

08004b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b0c:	f7ff ffdc 	bl	8004ac8 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0b5b      	lsrs	r3, r3, #13
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4903      	ldr	r1, [pc, #12]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08008600 	.word	0x08008600

08004b30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d035      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b58:	4b62      	ldr	r3, [pc, #392]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5e:	f7fc fa59 	bl	8001014 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b66:	f7fc fa55 	bl	8001014 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0b0      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b78:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	019a      	lsls	r2, r3, #6
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	071b      	lsls	r3, r3, #28
 8004b90:	4955      	ldr	r1, [pc, #340]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b98:	4b52      	ldr	r3, [pc, #328]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc fa39 	bl	8001014 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ba6:	f7fc fa35 	bl	8001014 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e090      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb8:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8083 	beq.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4b44      	ldr	r3, [pc, #272]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	4a43      	ldr	r2, [pc, #268]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
 8004be2:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bee:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a3e      	ldr	r2, [pc, #248]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fa0b 	bl	8001014 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fc fa07 	bl	8001014 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e062      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c14:	4b35      	ldr	r3, [pc, #212]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c20:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02f      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d028      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c54:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c5a:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d114      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c66:	f7fc f9d5 	bl	8001014 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fc f9d1 	bl	8001014 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e02a      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb2:	490d      	ldr	r1, [pc, #52]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]
 8004cb8:	e005      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cc4:	6093      	str	r3, [r2, #8]
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd2:	4905      	ldr	r1, [pc, #20]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	42470068 	.word	0x42470068
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	42470e40 	.word	0x42470e40

08004cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d13e      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d12:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d12f      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d2a:	617b      	str	r3, [r7, #20]
          break;
 8004d2c:	e02f      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d2e:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d108      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	e007      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d56:	4a15      	ldr	r2, [pc, #84]	; (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d78:	0f1b      	lsrs	r3, r3, #28
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
          break;
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
          break;
 8004d8c:	bf00      	nop
        }
      }
      break;
 8004d8e:	bf00      	nop
    }
  }
  return frequency;
 8004d90:	697b      	ldr	r3, [r7, #20]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	00bb8000 	.word	0x00bb8000
 8004da8:	007a1200 	.word	0x007a1200
 8004dac:	00f42400 	.word	0x00f42400

08004db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07b      	b.n	8004eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fb ff2c 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	f003 0104 	and.w	r1, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0210 	and.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e03f      	b.n	8004f54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fb ff01 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2224      	movs	r2, #36	; 0x24
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fcde 	bl	80058c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d11d      	bne.n	8004fb2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_UART_Receive_IT+0x26>
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e016      	b.n	8004fb4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Receive_IT+0x38>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e00f      	b.n	8004fb4 <HAL_UART_Receive_IT+0x58>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fab5 	bl	8005518 <UART_Start_Receive_IT>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	e000      	b.n	8004fb4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b0ba      	sub	sp, #232	; 0xe8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_UART_IRQHandler+0x66>
 800500e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fb99 	bl	8005752 <UART_Receive_IT>
      return;
 8005020:	e256      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80de 	beq.w	80051e8 <HAL_UART_IRQHandler+0x22c>
 800502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80d1 	beq.w	80051e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xae>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_UART_IRQHandler+0xd2>
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f043 0202 	orr.w	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <HAL_UART_IRQHandler+0xf6>
 800509a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0204 	orr.w	r2, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d011      	beq.n	80050e2 <HAL_UART_IRQHandler+0x126>
 80050be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f043 0208 	orr.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 81ed 	beq.w	80054c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_UART_IRQHandler+0x14e>
 80050f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb24 	bl	8005752 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <HAL_UART_IRQHandler+0x17a>
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d04f      	beq.n	80051d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa2c 	bl	8005594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d141      	bne.n	80051ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005176:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800517a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800518e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1d9      	bne.n	800514a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	d013      	beq.n	80051c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	4a7d      	ldr	r2, [pc, #500]	; (8005398 <HAL_UART_IRQHandler+0x3dc>)
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc fc7d 	bl	8001aaa <HAL_DMA_Abort_IT>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e00e      	b.n	80051e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f990 	bl	80054ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	e00a      	b.n	80051e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f98c 	bl	80054ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e006      	b.n	80051e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f988 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051e2:	e170      	b.n	80054c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	bf00      	nop
    return;
 80051e6:	e16e      	b.n	80054c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	f040 814a 	bne.w	8005486 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8143 	beq.w	8005486 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 813c 	beq.w	8005486 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	f040 80b4 	bne.w	800539c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8140 	beq.w	80054ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800524e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005252:	429a      	cmp	r2, r3
 8005254:	f080 8139 	bcs.w	80054ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800525e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526a:	f000 8088 	beq.w	800537e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800529a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800529e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1d9      	bne.n	800526e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e1      	bne.n	80052ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3314      	adds	r3, #20
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800531a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800531c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e3      	bne.n	80052f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800534c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534e:	f023 0310 	bic.w	r3, r3, #16
 8005352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005360:	65ba      	str	r2, [r7, #88]	; 0x58
 8005362:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800536e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e3      	bne.n	800533c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	4618      	mov	r0, r3
 800537a:	f7fc fb26 	bl	80019ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005386:	b29b      	uxth	r3, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	b29b      	uxth	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8b6 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005394:	e099      	b.n	80054ca <HAL_UART_IRQHandler+0x50e>
 8005396:	bf00      	nop
 8005398:	0800565b 	.word	0x0800565b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 808b 	beq.w	80054ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8086 	beq.w	80054ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053e6:	647a      	str	r2, [r7, #68]	; 0x44
 80053e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e3      	bne.n	80053c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	623b      	str	r3, [r7, #32]
   return(result);
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800541e:	633a      	str	r2, [r7, #48]	; 0x30
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e3      	bne.n	80053fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005464:	61fa      	str	r2, [r7, #28]
 8005466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	69b9      	ldr	r1, [r7, #24]
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	617b      	str	r3, [r7, #20]
   return(result);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e3      	bne.n	8005440 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f83e 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005484:	e023      	b.n	80054ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_UART_IRQHandler+0x4ea>
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f8ef 	bl	8005682 <UART_Transmit_IT>
    return;
 80054a4:	e014      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00e      	beq.n	80054d0 <HAL_UART_IRQHandler+0x514>
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f92f 	bl	8005722 <UART_EndTransmit_IT>
    return;
 80054c4:	e004      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
    return;
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
      return;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
      return;
 80054ce:	bf00      	nop
  }
}
 80054d0:	37e8      	adds	r7, #232	; 0xe8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop

080054d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2222      	movs	r2, #34	; 0x22
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005564:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695a      	ldr	r2, [r3, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0220 	orr.w	r2, r2, #32
 8005584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b095      	sub	sp, #84	; 0x54
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055bc:	643a      	str	r2, [r7, #64]	; 0x40
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e5      	bne.n	80055d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	d119      	bne.n	8005640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	60bb      	str	r3, [r7, #8]
   return(result);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 0310 	bic.w	r3, r3, #16
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800562c:	61ba      	str	r2, [r7, #24]
 800562e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e5      	bne.n	800560c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800564e:	bf00      	nop
 8005650:	3754      	adds	r7, #84	; 0x54
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff ff39 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b21      	cmp	r3, #33	; 0x21
 8005694:	d13e      	bne.n	8005714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d114      	bne.n	80056ca <UART_Transmit_IT+0x48>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d110      	bne.n	80056ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]
 80056c8:	e008      	b.n	80056dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6211      	str	r1, [r2, #32]
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4619      	mov	r1, r3
 80056ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10f      	bne.n	8005710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fec8 	bl	80054d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b08c      	sub	sp, #48	; 0x30
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b22      	cmp	r3, #34	; 0x22
 8005764:	f040 80ab 	bne.w	80058be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005770:	d117      	bne.n	80057a2 <UART_Receive_IT+0x50>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d113      	bne.n	80057a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005790:	b29a      	uxth	r2, r3
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	1c9a      	adds	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28
 80057a0:	e026      	b.n	80057f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d007      	beq.n	80057c6 <UART_Receive_IT+0x74>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <UART_Receive_IT+0x82>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	e008      	b.n	80057e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4619      	mov	r1, r3
 80057fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005800:	2b00      	cmp	r3, #0
 8005802:	d15a      	bne.n	80058ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0220 	bic.w	r2, r2, #32
 8005812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	d135      	bne.n	80058b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	613b      	str	r3, [r7, #16]
   return(result);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f023 0310 	bic.w	r3, r3, #16
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	623a      	str	r2, [r7, #32]
 800586c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	69f9      	ldr	r1, [r7, #28]
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	61bb      	str	r3, [r7, #24]
   return(result);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e5      	bne.n	800584a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b10      	cmp	r3, #16
 800588a:	d10a      	bne.n	80058a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff fe29 	bl	8005500 <HAL_UARTEx_RxEventCallback>
 80058ae:	e002      	b.n	80058b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fa fe0b 	bl	80004cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e002      	b.n	80058c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e000      	b.n	80058c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3730      	adds	r7, #48	; 0x30
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b0c0      	sub	sp, #256	; 0x100
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	68d9      	ldr	r1, [r3, #12]
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	ea40 0301 	orr.w	r3, r0, r1
 80058f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	431a      	orrs	r2, r3
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	431a      	orrs	r2, r3
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005920:	f021 010c 	bic.w	r1, r1, #12
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800592e:	430b      	orrs	r3, r1
 8005930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	6999      	ldr	r1, [r3, #24]
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	ea40 0301 	orr.w	r3, r0, r1
 800594e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b8f      	ldr	r3, [pc, #572]	; (8005b94 <UART_SetConfig+0x2cc>)
 8005958:	429a      	cmp	r2, r3
 800595a:	d005      	beq.n	8005968 <UART_SetConfig+0xa0>
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b8d      	ldr	r3, [pc, #564]	; (8005b98 <UART_SetConfig+0x2d0>)
 8005964:	429a      	cmp	r2, r3
 8005966:	d104      	bne.n	8005972 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7ff f8ce 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 800596c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005970:	e003      	b.n	800597a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005972:	f7ff f8b5 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 8005976:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005984:	f040 810c 	bne.w	8005ba0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598c:	2200      	movs	r2, #0
 800598e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005992:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005996:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800599a:	4622      	mov	r2, r4
 800599c:	462b      	mov	r3, r5
 800599e:	1891      	adds	r1, r2, r2
 80059a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80059a2:	415b      	adcs	r3, r3
 80059a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059aa:	4621      	mov	r1, r4
 80059ac:	eb12 0801 	adds.w	r8, r2, r1
 80059b0:	4629      	mov	r1, r5
 80059b2:	eb43 0901 	adc.w	r9, r3, r1
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ca:	4690      	mov	r8, r2
 80059cc:	4699      	mov	r9, r3
 80059ce:	4623      	mov	r3, r4
 80059d0:	eb18 0303 	adds.w	r3, r8, r3
 80059d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059d8:	462b      	mov	r3, r5
 80059da:	eb49 0303 	adc.w	r3, r9, r3
 80059de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059f6:	460b      	mov	r3, r1
 80059f8:	18db      	adds	r3, r3, r3
 80059fa:	653b      	str	r3, [r7, #80]	; 0x50
 80059fc:	4613      	mov	r3, r2
 80059fe:	eb42 0303 	adc.w	r3, r2, r3
 8005a02:	657b      	str	r3, [r7, #84]	; 0x54
 8005a04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a0c:	f7fa fbdc 	bl	80001c8 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4b61      	ldr	r3, [pc, #388]	; (8005b9c <UART_SetConfig+0x2d4>)
 8005a16:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	011c      	lsls	r4, r3, #4
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a40:	4641      	mov	r1, r8
 8005a42:	eb12 0a01 	adds.w	sl, r2, r1
 8005a46:	4649      	mov	r1, r9
 8005a48:	eb43 0b01 	adc.w	fp, r3, r1
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a60:	4692      	mov	sl, r2
 8005a62:	469b      	mov	fp, r3
 8005a64:	4643      	mov	r3, r8
 8005a66:	eb1a 0303 	adds.w	r3, sl, r3
 8005a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	eb4b 0303 	adc.w	r3, fp, r3
 8005a74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	18db      	adds	r3, r3, r3
 8005a90:	643b      	str	r3, [r7, #64]	; 0x40
 8005a92:	4613      	mov	r3, r2
 8005a94:	eb42 0303 	adc.w	r3, r2, r3
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005aa2:	f7fa fb91 	bl	80001c8 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <UART_SetConfig+0x2d4>)
 8005aae:	fba3 2301 	umull	r2, r3, r3, r1
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2264      	movs	r2, #100	; 0x64
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	1acb      	subs	r3, r1, r3
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ac2:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <UART_SetConfig+0x2d4>)
 8005ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad0:	441c      	add	r4, r3
 8005ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005adc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ae0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	1891      	adds	r1, r2, r2
 8005aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aec:	415b      	adcs	r3, r3
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005af4:	4641      	mov	r1, r8
 8005af6:	1851      	adds	r1, r2, r1
 8005af8:	6339      	str	r1, [r7, #48]	; 0x30
 8005afa:	4649      	mov	r1, r9
 8005afc:	414b      	adcs	r3, r1
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	00cb      	lsls	r3, r1, #3
 8005b10:	4651      	mov	r1, sl
 8005b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b16:	4651      	mov	r1, sl
 8005b18:	00ca      	lsls	r2, r1, #3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4642      	mov	r2, r8
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b28:	464b      	mov	r3, r9
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	eb42 0303 	adc.w	r3, r2, r3
 8005b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b48:	460b      	mov	r3, r1
 8005b4a:	18db      	adds	r3, r3, r3
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4e:	4613      	mov	r3, r2
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b5e:	f7fa fb33 	bl	80001c8 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <UART_SetConfig+0x2d4>)
 8005b68:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2164      	movs	r1, #100	; 0x64
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	3332      	adds	r3, #50	; 0x32
 8005b7a:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <UART_SetConfig+0x2d4>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	f003 0207 	and.w	r2, r3, #7
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4422      	add	r2, r4
 8005b8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b90:	e105      	b.n	8005d9e <UART_SetConfig+0x4d6>
 8005b92:	bf00      	nop
 8005b94:	40011000 	.word	0x40011000
 8005b98:	40011400 	.word	0x40011400
 8005b9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005baa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bb2:	4642      	mov	r2, r8
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	6239      	str	r1, [r7, #32]
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	1854      	adds	r4, r2, r1
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	eb43 0501 	adc.w	r5, r3, r1
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	00eb      	lsls	r3, r5, #3
 8005bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bda:	00e2      	lsls	r2, r4, #3
 8005bdc:	4614      	mov	r4, r2
 8005bde:	461d      	mov	r5, r3
 8005be0:	4643      	mov	r3, r8
 8005be2:	18e3      	adds	r3, r4, r3
 8005be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005be8:	464b      	mov	r3, r9
 8005bea:	eb45 0303 	adc.w	r3, r5, r3
 8005bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c0e:	4629      	mov	r1, r5
 8005c10:	008b      	lsls	r3, r1, #2
 8005c12:	4621      	mov	r1, r4
 8005c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c18:	4621      	mov	r1, r4
 8005c1a:	008a      	lsls	r2, r1, #2
 8005c1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c20:	f7fa fad2 	bl	80001c8 <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4b60      	ldr	r3, [pc, #384]	; (8005dac <UART_SetConfig+0x4e4>)
 8005c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	011c      	lsls	r4, r3, #4
 8005c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	1891      	adds	r1, r2, r2
 8005c4a:	61b9      	str	r1, [r7, #24]
 8005c4c:	415b      	adcs	r3, r3
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c54:	4641      	mov	r1, r8
 8005c56:	1851      	adds	r1, r2, r1
 8005c58:	6139      	str	r1, [r7, #16]
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	414b      	adcs	r3, r1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	00cb      	lsls	r3, r1, #3
 8005c70:	4651      	mov	r1, sl
 8005c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c76:	4651      	mov	r1, sl
 8005c78:	00ca      	lsls	r2, r1, #3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4642      	mov	r2, r8
 8005c82:	189b      	adds	r3, r3, r2
 8005c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c88:	464b      	mov	r3, r9
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cac:	4649      	mov	r1, r9
 8005cae:	008b      	lsls	r3, r1, #2
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	008a      	lsls	r2, r1, #2
 8005cba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cbe:	f7fa fa83 	bl	80001c8 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4b39      	ldr	r3, [pc, #228]	; (8005dac <UART_SetConfig+0x4e4>)
 8005cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	2164      	movs	r1, #100	; 0x64
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	3332      	adds	r3, #50	; 0x32
 8005cda:	4a34      	ldr	r2, [pc, #208]	; (8005dac <UART_SetConfig+0x4e4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce6:	441c      	add	r4, r3
 8005ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cec:	2200      	movs	r2, #0
 8005cee:	673b      	str	r3, [r7, #112]	; 0x70
 8005cf0:	677a      	str	r2, [r7, #116]	; 0x74
 8005cf2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cf6:	4642      	mov	r2, r8
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	1891      	adds	r1, r2, r2
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	415b      	adcs	r3, r3
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d06:	4641      	mov	r1, r8
 8005d08:	1851      	adds	r1, r2, r1
 8005d0a:	6039      	str	r1, [r7, #0]
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	414b      	adcs	r3, r1
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d1e:	4659      	mov	r1, fp
 8005d20:	00cb      	lsls	r3, r1, #3
 8005d22:	4651      	mov	r1, sl
 8005d24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d28:	4651      	mov	r1, sl
 8005d2a:	00ca      	lsls	r2, r1, #3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	4642      	mov	r2, r8
 8005d34:	189b      	adds	r3, r3, r2
 8005d36:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d38:	464b      	mov	r3, r9
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d4c:	667a      	str	r2, [r7, #100]	; 0x64
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	008b      	lsls	r3, r1, #2
 8005d5e:	4641      	mov	r1, r8
 8005d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d64:	4641      	mov	r1, r8
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d6c:	f7fa fa2c 	bl	80001c8 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <UART_SetConfig+0x4e4>)
 8005d76:	fba3 1302 	umull	r1, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2164      	movs	r1, #100	; 0x64
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	3332      	adds	r3, #50	; 0x32
 8005d88:	4a08      	ldr	r2, [pc, #32]	; (8005dac <UART_SetConfig+0x4e4>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	f003 020f 	and.w	r2, r3, #15
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4422      	add	r2, r4
 8005d9c:	609a      	str	r2, [r3, #8]
}
 8005d9e:	bf00      	nop
 8005da0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005da4:	46bd      	mov	sp, r7
 8005da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005daa:	bf00      	nop
 8005dac:	51eb851f 	.word	0x51eb851f

08005db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db0:	b084      	sub	sp, #16
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	f107 001c 	add.w	r0, r7, #28
 8005dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d122      	bne.n	8005e0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d105      	bne.n	8005e02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9c0 	bl	8006188 <USB_CoreReset>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e01a      	b.n	8005e44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f9b4 	bl	8006188 <USB_CoreReset>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
 8005e36:	e005      	b.n	8005e44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10b      	bne.n	8005e62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f043 0206 	orr.w	r2, r3, #6
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e6e:	b004      	add	sp, #16
 8005e70:	4770      	bx	lr

08005e72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f023 0201 	bic.w	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d115      	bne.n	8005f04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb f8a1 	bl	800102c <HAL_Delay>
      ms++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f93a 	bl	800616a <USB_GetMode>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d01e      	beq.n	8005f3a <USB_SetCurrentMode+0x84>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b31      	cmp	r3, #49	; 0x31
 8005f00:	d9f0      	bls.n	8005ee4 <USB_SetCurrentMode+0x2e>
 8005f02:	e01a      	b.n	8005f3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d115      	bne.n	8005f36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f16:	2001      	movs	r0, #1
 8005f18:	f7fb f888 	bl	800102c <HAL_Delay>
      ms++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f921 	bl	800616a <USB_GetMode>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <USB_SetCurrentMode+0x84>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b31      	cmp	r3, #49	; 0x31
 8005f32:	d9f0      	bls.n	8005f16 <USB_SetCurrentMode+0x60>
 8005f34:	e001      	b.n	8005f3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e005      	b.n	8005f46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b32      	cmp	r3, #50	; 0x32
 8005f3e:	d101      	bne.n	8005f44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <USB_FlushTxFifo+0x64>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e01b      	b.n	8005fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	daf2      	bge.n	8005f5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	019b      	lsls	r3, r3, #6
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <USB_FlushTxFifo+0x64>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e006      	b.n	8005fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d0f0      	beq.n	8005f88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	00030d40 	.word	0x00030d40

08005fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a11      	ldr	r2, [pc, #68]	; (8006014 <USB_FlushRxFifo+0x5c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e018      	b.n	8006008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	daf2      	bge.n	8005fc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a08      	ldr	r2, [pc, #32]	; (8006014 <USB_FlushRxFifo+0x5c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e006      	b.n	8006008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d0f0      	beq.n	8005fe8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	00030d40 	.word	0x00030d40

08006018 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	460b      	mov	r3, r1
 8006028:	71fb      	strb	r3, [r7, #7]
 800602a:	4613      	mov	r3, r2
 800602c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d123      	bne.n	8006086 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800603e:	88bb      	ldrh	r3, [r7, #4]
 8006040:	3303      	adds	r3, #3
 8006042:	089b      	lsrs	r3, r3, #2
 8006044:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e018      	b.n	800607e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	031a      	lsls	r2, r3, #12
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006058:	461a      	mov	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	3301      	adds	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	3301      	adds	r3, #1
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	429a      	cmp	r2, r3
 8006084:	d3e2      	bcc.n	800604c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3724      	adds	r7, #36	; 0x24
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006094:	b480      	push	{r7}
 8006096:	b08b      	sub	sp, #44	; 0x2c
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	089b      	lsrs	r3, r3, #2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	623b      	str	r3, [r7, #32]
 80060be:	e014      	b.n	80060ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	3301      	adds	r3, #1
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	3301      	adds	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	3301      	adds	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	3301      	adds	r3, #1
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	3301      	adds	r3, #1
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d3e6      	bcc.n	80060c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060f2:	8bfb      	ldrh	r3, [r7, #30]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01e      	beq.n	8006136 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006102:	461a      	mov	r2, r3
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	b2da      	uxtb	r2, r3
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	701a      	strb	r2, [r3, #0]
      i++;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	3301      	adds	r3, #1
 8006122:	623b      	str	r3, [r7, #32]
      pDest++;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	3301      	adds	r3, #1
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800612a:	8bfb      	ldrh	r3, [r7, #30]
 800612c:	3b01      	subs	r3, #1
 800612e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006130:	8bfb      	ldrh	r3, [r7, #30]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1ea      	bne.n	800610c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006138:	4618      	mov	r0, r3
 800613a:	372c      	adds	r7, #44	; 0x2c
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4013      	ands	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f003 0301 	and.w	r3, r3, #1
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
	...

08006188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <USB_CoreReset+0x64>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e01b      	b.n	80061de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	daf2      	bge.n	8006194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <USB_CoreReset+0x64>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d901      	bls.n	80061d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e006      	b.n	80061de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d0f0      	beq.n	80061be <USB_CoreReset+0x36>

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	00030d40 	.word	0x00030d40

080061f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061f0:	b084      	sub	sp, #16
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10a      	bne.n	8006262 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800625a:	f043 0304 	orr.w	r3, r3, #4
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	e014      	b.n	800628c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006270:	f023 0304 	bic.w	r3, r3, #4
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e009      	b.n	800628c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006286:	f023 0304 	bic.w	r3, r3, #4
 800628a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800628c:	2110      	movs	r1, #16
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fe5e 	bl	8005f50 <USB_FlushTxFifo>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fe8a 	bl	8005fb8 <USB_FlushRxFifo>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	e015      	b.n	80062e0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	461a      	mov	r2, r3
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d4:	461a      	mov	r2, r3
 80062d6:	2300      	movs	r3, #0
 80062d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3301      	adds	r3, #1
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3e5      	bcc.n	80062b4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006308:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a13      	ldr	r2, [pc, #76]	; (800635c <USB_HostInit+0x16c>)
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a13      	ldr	r2, [pc, #76]	; (8006360 <USB_HostInit+0x170>)
 8006314:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006318:	e009      	b.n	800632e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a10      	ldr	r2, [pc, #64]	; (8006364 <USB_HostInit+0x174>)
 8006324:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a0f      	ldr	r2, [pc, #60]	; (8006368 <USB_HostInit+0x178>)
 800632a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f043 0210 	orr.w	r2, r3, #16
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <USB_HostInit+0x17c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006358:	b004      	add	sp, #16
 800635a:	4770      	bx	lr
 800635c:	01000200 	.word	0x01000200
 8006360:	00e00300 	.word	0x00e00300
 8006364:	00600080 	.word	0x00600080
 8006368:	004000e0 	.word	0x004000e0
 800636c:	a3200008 	.word	0xa3200008

08006370 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d107      	bne.n	80063c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b8:	461a      	mov	r2, r3
 80063ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063be:	6053      	str	r3, [r2, #4]
 80063c0:	e009      	b.n	80063d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d106      	bne.n	80063d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ce:	461a      	mov	r2, r3
 80063d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80063d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006408:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <USB_DriveVbus+0x44>
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d106      	bne.n	8006428 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006426:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	d109      	bne.n	8006448 <USB_DriveVbus+0x64>
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006446:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	0c5b      	lsrs	r3, r3, #17
 8006474:	f003 0303 	and.w	r3, r3, #3
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	b29b      	uxth	r3, r3
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	70fb      	strb	r3, [r7, #3]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70bb      	strb	r3, [r7, #2]
 80064be:	4613      	mov	r3, r2
 80064c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d6:	461a      	mov	r2, r3
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80064de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d87e      	bhi.n	80065e4 <USB_HC_Init+0x13c>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <USB_HC_Init+0x44>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	080065a7 	.word	0x080065a7
 80064f4:	080064fd 	.word	0x080064fd
 80064f8:	08006569 	.word	0x08006569
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	461a      	mov	r2, r3
 800650a:	f240 439d 	movw	r3, #1181	; 0x49d
 800650e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006510:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006514:	2b00      	cmp	r3, #0
 8006516:	da10      	bge.n	800653a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	440a      	add	r2, r1
 800652e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006536:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006538:	e057      	b.n	80065ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d051      	beq.n	80065ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	440a      	add	r2, r1
 800655c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006560:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006564:	60d3      	str	r3, [r2, #12]
      break;
 8006566:	e040      	b.n	80065ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	461a      	mov	r2, r3
 8006576:	f240 639d 	movw	r3, #1693	; 0x69d
 800657a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800657c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006580:	2b00      	cmp	r3, #0
 8006582:	da34      	bge.n	80065ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065a4:	e023      	b.n	80065ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	461a      	mov	r2, r3
 80065b4:	f240 2325 	movw	r3, #549	; 0x225
 80065b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da17      	bge.n	80065f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80065e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80065e2:	e006      	b.n	80065f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	77fb      	strb	r3, [r7, #31]
      break;
 80065e8:	e004      	b.n	80065f4 <USB_HC_Init+0x14c>
      break;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <USB_HC_Init+0x14c>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <USB_HC_Init+0x14c>
      break;
 80065f2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660e:	f043 0302 	orr.w	r3, r3, #2
 8006612:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	2101      	movs	r1, #1
 8006624:	fa01 f303 	lsl.w	r3, r1, r3
 8006628:	6939      	ldr	r1, [r7, #16]
 800662a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800662e:	4313      	orrs	r3, r2
 8006630:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800663e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006642:	2b00      	cmp	r3, #0
 8006644:	da03      	bge.n	800664e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	e001      	b.n	8006652 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff feff 	bl	8006456 <USB_GetHostSpeed>
 8006658:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800665a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800665e:	2b02      	cmp	r3, #2
 8006660:	d106      	bne.n	8006670 <USB_HC_Init+0x1c8>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d003      	beq.n	8006670 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e001      	b.n	8006674 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006674:	787b      	ldrb	r3, [r7, #1]
 8006676:	059b      	lsls	r3, r3, #22
 8006678:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800667c:	78bb      	ldrb	r3, [r7, #2]
 800667e:	02db      	lsls	r3, r3, #11
 8006680:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006684:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006686:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800668a:	049b      	lsls	r3, r3, #18
 800668c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006690:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006692:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006694:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006698:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	0159      	lsls	r1, r3, #5
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	440b      	add	r3, r1
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066b0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80066b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d003      	beq.n	80066c2 <USB_HC_Init+0x21a>
 80066ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10f      	bne.n	80066e2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	78fa      	ldrb	r2, [r7, #3]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	; 0x30
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006708:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02d      	beq.n	8006772 <USB_HC_StartXfer+0x86>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d129      	bne.n	8006772 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d117      	bne.n	8006754 <USB_HC_StartXfer+0x68>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	79db      	ldrb	r3, [r3, #7]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <USB_HC_StartXfer+0x48>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	79db      	ldrb	r3, [r3, #7]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d10f      	bne.n	8006754 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	4413      	add	r3, r2
 800673c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	440a      	add	r2, r1
 800674a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <USB_HC_StartXfer+0x86>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	795b      	ldrb	r3, [r3, #5]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	4619      	mov	r1, r3
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fa0f 	bl	8006b8c <USB_DoPing>
      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e0f8      	b.n	8006964 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d018      	beq.n	80067ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	8912      	ldrh	r2, [r2, #8]
 8006782:	4413      	add	r3, r2
 8006784:	3b01      	subs	r3, #1
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	8912      	ldrh	r2, [r2, #8]
 800678a:	fbb3 f3f2 	udiv	r3, r3, r2
 800678e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006790:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006792:	8b7b      	ldrh	r3, [r7, #26]
 8006794:	429a      	cmp	r2, r3
 8006796:	d90b      	bls.n	80067b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006798:	8b7b      	ldrh	r3, [r7, #26]
 800679a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800679c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	8912      	ldrh	r2, [r2, #8]
 80067a2:	fb03 f202 	mul.w	r2, r3, r2
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	611a      	str	r2, [r3, #16]
 80067aa:	e001      	b.n	80067b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80067ac:	2301      	movs	r3, #1
 80067ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	78db      	ldrb	r3, [r3, #3]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	8912      	ldrh	r2, [r2, #8]
 80067be:	fb03 f202 	mul.w	r2, r3, r2
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	611a      	str	r2, [r3, #16]
 80067c6:	e003      	b.n	80067d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	695a      	ldr	r2, [r3, #20]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067da:	04d9      	lsls	r1, r3, #19
 80067dc:	4b63      	ldr	r3, [pc, #396]	; (800696c <USB_HC_StartXfer+0x280>)
 80067de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	7a9b      	ldrb	r3, [r3, #10]
 80067e6:	075b      	lsls	r3, r3, #29
 80067e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067ec:	69f9      	ldr	r1, [r7, #28]
 80067ee:	0148      	lsls	r0, r1, #5
 80067f0:	6a39      	ldr	r1, [r7, #32]
 80067f2:	4401      	add	r1, r0
 80067f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	68d9      	ldr	r1, [r3, #12]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	460a      	mov	r2, r1
 8006814:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	6a3a      	ldr	r2, [r7, #32]
 8006842:	440a      	add	r2, r1
 8006844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006848:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800684c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	7e7b      	ldrb	r3, [r7, #25]
 800685e:	075b      	lsls	r3, r3, #29
 8006860:	69f9      	ldr	r1, [r7, #28]
 8006862:	0148      	lsls	r0, r1, #5
 8006864:	6a39      	ldr	r1, [r7, #32]
 8006866:	4401      	add	r1, r0
 8006868:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006886:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	78db      	ldrb	r3, [r3, #3]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	e003      	b.n	80068a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	461a      	mov	r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e04e      	b.n	8006964 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	78db      	ldrb	r3, [r3, #3]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d149      	bne.n	8006962 <USB_HC_StartXfer+0x276>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d045      	beq.n	8006962 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	79db      	ldrb	r3, [r3, #7]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d830      	bhi.n	8006940 <USB_HC_StartXfer+0x254>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USB_HC_StartXfer+0x1f8>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006919 	.word	0x08006919
 80068ec:	080068f5 	.word	0x080068f5
 80068f0:	08006919 	.word	0x08006919
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	3303      	adds	r3, #3
 80068fa:	089b      	lsrs	r3, r3, #2
 80068fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068fe:	8afa      	ldrh	r2, [r7, #22]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	b29b      	uxth	r3, r3
 8006906:	429a      	cmp	r2, r3
 8006908:	d91c      	bls.n	8006944 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	619a      	str	r2, [r3, #24]
        }
        break;
 8006916:	e015      	b.n	8006944 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	3303      	adds	r3, #3
 800691e:	089b      	lsrs	r3, r3, #2
 8006920:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006922:	8afa      	ldrh	r2, [r7, #22]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	b29b      	uxth	r3, r3
 800692e:	429a      	cmp	r2, r3
 8006930:	d90a      	bls.n	8006948 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]
        }
        break;
 800693e:	e003      	b.n	8006948 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006940:	bf00      	nop
 8006942:	e002      	b.n	800694a <USB_HC_StartXfer+0x25e>
        break;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <USB_HC_StartXfer+0x25e>
        break;
 8006948:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	68d9      	ldr	r1, [r3, #12]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	785a      	ldrb	r2, [r3, #1]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	b29b      	uxth	r3, r3
 8006958:	2000      	movs	r0, #0
 800695a:	9000      	str	r0, [sp, #0]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fb5b 	bl	8006018 <USB_WritePacket>
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3728      	adds	r7, #40	; 0x28
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	1ff80000 	.word	0x1ff80000

08006970 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	b29b      	uxth	r3, r3
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006992:	b480      	push	{r7}
 8006994:	b089      	sub	sp, #36	; 0x24
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	0c9b      	lsrs	r3, r3, #18
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	0fdb      	lsrs	r3, r3, #31
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d104      	bne.n	80069ec <USB_HC_Halt+0x5a>
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e0c8      	b.n	8006b7e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <USB_HC_Halt+0x66>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d163      	bne.n	8006ac0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 80ab 	bne.w	8006b7c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d133      	bne.n	8006a9a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a70:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a7e:	d81d      	bhi.n	8006abc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a96:	d0ec      	beq.n	8006a72 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a98:	e070      	b.n	8006b7c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ab8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aba:	e05f      	b.n	8006b7c <USB_HC_Halt+0x1ea>
            break;
 8006abc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006abe:	e05d      	b.n	8006b7c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ade:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d133      	bne.n	8006b58 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3c:	d81d      	bhi.n	8006b7a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b54:	d0ec      	beq.n	8006b30 <USB_HC_Halt+0x19e>
 8006b56:	e011      	b.n	8006b7c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e000      	b.n	8006b7c <USB_HC_Halt+0x1ea>
          break;
 8006b7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3724      	adds	r7, #36	; 0x24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	04da      	lsls	r2, r3, #19
 8006ba8:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <USB_DoPing+0x74>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	1ff80000 	.word	0x1ff80000

08006c04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff f93b 	bl	8005e94 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c1e:	2110      	movs	r1, #16
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff f995 	bl	8005f50 <USB_FlushTxFifo>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff f9c1 	bl	8005fb8 <USB_FlushRxFifo>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e01f      	b.n	8006c86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b0f      	cmp	r3, #15
 8006c8a:	d9dc      	bls.n	8006c46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e034      	b.n	8006cfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cd8:	d80c      	bhi.n	8006cf4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf0:	d0ec      	beq.n	8006ccc <USB_StopHost+0xc8>
 8006cf2:	e000      	b.n	8006cf6 <USB_StopHost+0xf2>
        break;
 8006cf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d9c7      	bls.n	8006c92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f8aa 	bl	8005e72 <USB_EnableGlobalInt>

  return ret;
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b089      	sub	sp, #36	; 0x24
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d30:	2301      	movs	r3, #1
 8006d32:	2202      	movs	r2, #2
 8006d34:	2102      	movs	r1, #2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc66 	bl	8007608 <USBH_FindInterface>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d002      	beq.n	8006d4c <USBH_CDC_InterfaceInit+0x24>
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d901      	bls.n	8006d50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e13d      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fc3b 	bl	80075d0 <USBH_SelectInterface>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e131      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d6e:	2050      	movs	r0, #80	; 0x50
 8006d70:	f001 fb12 	bl	8008398 <malloc>
 8006d74:	4603      	mov	r3, r0
 8006d76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e11f      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d8c:	2250      	movs	r2, #80	; 0x50
 8006d8e:	2100      	movs	r1, #0
 8006d90:	68b8      	ldr	r0, [r7, #8]
 8006d92:	f001 fb11 	bl	80083b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	211a      	movs	r1, #26
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da15      	bge.n	8006dda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	211a      	movs	r1, #26
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	211a      	movs	r1, #26
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ff9c 	bl	8007d1e <USBH_AllocPipe>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	7819      	ldrb	r1, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	7858      	ldrb	r0, [r3, #1]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	8952      	ldrh	r2, [r2, #10]
 8006e06:	9202      	str	r2, [sp, #8]
 8006e08:	2203      	movs	r2, #3
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4623      	mov	r3, r4
 8006e10:	4602      	mov	r2, r0
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 ff54 	bl	8007cc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fa17 	bl	8008254 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e26:	2300      	movs	r3, #0
 8006e28:	2200      	movs	r2, #0
 8006e2a:	210a      	movs	r1, #10
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fbeb 	bl	8007608 <USBH_FindInterface>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2bff      	cmp	r3, #255	; 0xff
 8006e3a:	d002      	beq.n	8006e42 <USBH_CDC_InterfaceInit+0x11a>
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d901      	bls.n	8006e46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	e0c2      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	211a      	movs	r1, #26
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da16      	bge.n	8006e8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	211a      	movs	r1, #26
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e6e:	781a      	ldrb	r2, [r3, #0]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	211a      	movs	r1, #26
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	835a      	strh	r2, [r3, #26]
 8006e8a:	e015      	b.n	8006eb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	211a      	movs	r1, #26
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	211a      	movs	r1, #26
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	211a      	movs	r1, #26
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da16      	bge.n	8006efe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	211a      	movs	r1, #26
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	211a      	movs	r1, #26
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	835a      	strh	r2, [r3, #26]
 8006efc:	e015      	b.n	8006f2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	211a      	movs	r1, #26
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	211a      	movs	r1, #26
 8006f1a:	fb01 f303 	mul.w	r3, r1, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	7b9b      	ldrb	r3, [r3, #14]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fef4 	bl	8007d1e <USBH_AllocPipe>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	7bdb      	ldrb	r3, [r3, #15]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 feea 	bl	8007d1e <USBH_AllocPipe>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	7b59      	ldrb	r1, [r3, #13]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	7b98      	ldrb	r0, [r3, #14]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	8b12      	ldrh	r2, [r2, #24]
 8006f6a:	9202      	str	r2, [sp, #8]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4623      	mov	r3, r4
 8006f74:	4602      	mov	r2, r0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fea2 	bl	8007cc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	7b19      	ldrb	r1, [r3, #12]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	7bd8      	ldrb	r0, [r3, #15]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	8b52      	ldrh	r2, [r2, #26]
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	2202      	movs	r2, #2
 8006f98:	9201      	str	r2, [sp, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fe8d 	bl	8007cc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	7b5b      	ldrb	r3, [r3, #13]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f94c 	bl	8008254 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	7b1b      	ldrb	r3, [r3, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 f945 	bl	8008254 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd90      	pop	{r4, r7, pc}

08006fd4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fe82 	bl	8007cfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fead 	bl	8007d60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	7b1b      	ldrb	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00e      	beq.n	8007032 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fe6f 	bl	8007cfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	7b1b      	ldrb	r3, [r3, #12]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fe9a 	bl	8007d60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	7b5b      	ldrb	r3, [r3, #13]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	7b5b      	ldrb	r3, [r3, #13]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fe5c 	bl	8007cfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	7b5b      	ldrb	r3, [r3, #13]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fe87 	bl	8007d60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f99b 	bl	80083a8 <free>
    phost->pActiveClass->pData = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007078:	2200      	movs	r2, #0
 800707a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3340      	adds	r3, #64	; 0x40
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f8b1 	bl	8007206 <GetLineCoding>
 80070a4:	4603      	mov	r3, r0
 80070a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b4:	2102      	movs	r1, #2
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070ba:	7afb      	ldrb	r3, [r7, #11]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d877      	bhi.n	80071d8 <USBH_CDC_Process+0x114>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USBH_CDC_Process+0x2c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007105 	.word	0x08007105
 80070f4:	0800710b 	.word	0x0800710b
 80070f8:	0800713b 	.word	0x0800713b
 80070fc:	080071af 	.word	0x080071af
 8007100:	080071bd 	.word	0x080071bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e06d      	b.n	80071e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f897 	bl	8007244 <SetLineCoding>
 8007116:	4603      	mov	r3, r0
 8007118:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007128:	e058      	b.n	80071dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d055      	beq.n	80071dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007138:	e050      	b.n	80071dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	3340      	adds	r3, #64	; 0x40
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f860 	bl	8007206 <GetLineCoding>
 8007146:	4603      	mov	r3, r0
 8007148:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d126      	bne.n	800719e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007162:	791b      	ldrb	r3, [r3, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d13b      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007172:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007174:	429a      	cmp	r2, r3
 8007176:	d133      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007182:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007184:	429a      	cmp	r2, r3
 8007186:	d12b      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007190:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007192:	429a      	cmp	r2, r3
 8007194:	d124      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f958 	bl	800744c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800719c:	e020      	b.n	80071e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d01d      	beq.n	80071e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2204      	movs	r2, #4
 80071a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071ac:	e018      	b.n	80071e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f867 	bl	8007282 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8da 	bl	800736e <CDC_ProcessReception>
      break;
 80071ba:	e014      	b.n	80071e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb08 	bl	80077d4 <USBH_ClrFeature>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071d6:	e005      	b.n	80071e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80071d8:	bf00      	nop
 80071da:	e004      	b.n	80071e6 <USBH_CDC_Process+0x122>
      break;
 80071dc:	bf00      	nop
 80071de:	e002      	b.n	80071e6 <USBH_CDC_Process+0x122>
      break;
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <USBH_CDC_Process+0x122>
      break;
 80071e4:	bf00      	nop

  }

  return status;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	22a1      	movs	r2, #161	; 0xa1
 8007214:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2221      	movs	r2, #33	; 0x21
 800721a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2207      	movs	r2, #7
 800722c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2207      	movs	r2, #7
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 faf1 	bl	800781c <USBH_CtlReq>
 800723a:	4603      	mov	r3, r0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2221      	movs	r2, #33	; 0x21
 8007252:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2207      	movs	r2, #7
 800726a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2207      	movs	r2, #7
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fad2 	bl	800781c <USBH_CtlReq>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af02      	add	r7, sp, #8
 8007288:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007294:	2300      	movs	r3, #0
 8007296:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d002      	beq.n	80072a8 <CDC_ProcessTransmission+0x26>
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d023      	beq.n	80072ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072a6:	e05e      	b.n	8007366 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	8b12      	ldrh	r2, [r2, #24]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d90b      	bls.n	80072cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8b1a      	ldrh	r2, [r3, #24]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	7b5b      	ldrb	r3, [r3, #13]
 80072c0:	2001      	movs	r0, #1
 80072c2:	9000      	str	r0, [sp, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fcb8 	bl	8007c3a <USBH_BulkSendData>
 80072ca:	e00b      	b.n	80072e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	7b5b      	ldrb	r3, [r3, #13]
 80072da:	2001      	movs	r0, #1
 80072dc:	9000      	str	r0, [sp, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fcab 	bl	8007c3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072ec:	e03b      	b.n	8007366 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	7b5b      	ldrb	r3, [r3, #13]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 ff83 	bl	8008200 <USBH_LL_GetURBState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d128      	bne.n	8007356 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	8b12      	ldrh	r2, [r2, #24]
 800730c:	4293      	cmp	r3, r2
 800730e:	d90e      	bls.n	800732e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	8b12      	ldrh	r2, [r2, #24]
 8007318:	1a9a      	subs	r2, r3, r2
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	8b12      	ldrh	r2, [r2, #24]
 8007326:	441a      	add	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	61da      	str	r2, [r3, #28]
 800732c:	e002      	b.n	8007334 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007344:	e00e      	b.n	8007364 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f868 	bl	8007424 <USBH_CDC_TransmitCallback>
      break;
 8007354:	e006      	b.n	8007364 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d103      	bne.n	8007364 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007364:	bf00      	nop
  }
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007380:	2300      	movs	r3, #0
 8007382:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800738a:	2b03      	cmp	r3, #3
 800738c:	d002      	beq.n	8007394 <CDC_ProcessReception+0x26>
 800738e:	2b04      	cmp	r3, #4
 8007390:	d00e      	beq.n	80073b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007392:	e043      	b.n	800741c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	6a19      	ldr	r1, [r3, #32]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	8b5a      	ldrh	r2, [r3, #26]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	7b1b      	ldrb	r3, [r3, #12]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fc6f 	bl	8007c84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2204      	movs	r2, #4
 80073aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073ae:	e035      	b.n	800741c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	7b1b      	ldrb	r3, [r3, #12]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 ff22 	bl	8008200 <USBH_LL_GetURBState>
 80073bc:	4603      	mov	r3, r0
 80073be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d129      	bne.n	800741a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	7b1b      	ldrb	r3, [r3, #12]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fe85 	bl	80080dc <USBH_LL_GetLastXferSize>
 80073d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d016      	beq.n	800740c <CDC_ProcessReception+0x9e>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	8b5b      	ldrh	r3, [r3, #26]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d910      	bls.n	800740c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1ad2      	subs	r2, r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6a1a      	ldr	r2, [r3, #32]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	441a      	add	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800740a:	e006      	b.n	800741a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f80f 	bl	8007438 <USBH_CDC_ReceiveCallback>
      break;
 800741a:	bf00      	nop
  }
}
 800741c:	bf00      	nop
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007474:	2302      	movs	r3, #2
 8007476:	e029      	b.n	80074cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	79fa      	ldrb	r2, [r7, #7]
 800747c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f81f 	bl	80074d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fd97 	bl	8007ff8 <USBH_LL_Init>

  return USBH_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e009      	b.n	80074fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	33e0      	adds	r3, #224	; 0xe0
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b0f      	cmp	r3, #15
 80074fe:	d9f2      	bls.n	80074e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e009      	b.n	800751a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d3f1      	bcc.n	8007506 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2240      	movs	r2, #64	; 0x40
 8007546:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d016      	beq.n	80075be <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10e      	bne.n	80075b8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	33de      	adds	r3, #222	; 0xde
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	e004      	b.n	80075c2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075b8:	2302      	movs	r3, #2
 80075ba:	73fb      	strb	r3, [r7, #15]
 80075bc:	e001      	b.n	80075c2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075be:	2302      	movs	r3, #2
 80075c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d204      	bcs.n	80075f6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	78fa      	ldrb	r2, [r7, #3]
 80075f0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075f4:	e001      	b.n	80075fa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	70fb      	strb	r3, [r7, #3]
 800761a:	460b      	mov	r3, r1
 800761c:	70bb      	strb	r3, [r7, #2]
 800761e:	4613      	mov	r3, r2
 8007620:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007630:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007632:	e025      	b.n	8007680 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	221a      	movs	r2, #26
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	3308      	adds	r3, #8
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	3302      	adds	r3, #2
 8007644:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	795b      	ldrb	r3, [r3, #5]
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	429a      	cmp	r2, r3
 800764e:	d002      	beq.n	8007656 <USBH_FindInterface+0x4e>
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	2bff      	cmp	r3, #255	; 0xff
 8007654:	d111      	bne.n	800767a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800765a:	78ba      	ldrb	r2, [r7, #2]
 800765c:	429a      	cmp	r2, r3
 800765e:	d002      	beq.n	8007666 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007660:	78bb      	ldrb	r3, [r7, #2]
 8007662:	2bff      	cmp	r3, #255	; 0xff
 8007664:	d109      	bne.n	800767a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800766a:	787a      	ldrb	r2, [r7, #1]
 800766c:	429a      	cmp	r2, r3
 800766e:	d002      	beq.n	8007676 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007670:	787b      	ldrb	r3, [r7, #1]
 8007672:	2bff      	cmp	r3, #255	; 0xff
 8007674:	d101      	bne.n	800767a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	e006      	b.n	8007688 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	3301      	adds	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d9d6      	bls.n	8007634 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007686:	23ff      	movs	r3, #255	; 0xff
}
 8007688:	4618      	mov	r0, r3
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fce7 	bl	8008070 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80076a2:	2101      	movs	r1, #1
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fdbe 	bl	8008226 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f804 	bl	80076f6 <USBH_HandleSof>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b0b      	cmp	r3, #11
 8007706:	d10a      	bne.n	800771e <USBH_HandleSof+0x28>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
  }
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007736:	bf00      	nop
}
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007752:	bf00      	nop
}
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc7a 	bl	80080a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	791b      	ldrb	r3, [r3, #4]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fad1 	bl	8007d60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	795b      	ldrb	r3, [r3, #5]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 facb 	bl	8007d60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	789b      	ldrb	r3, [r3, #2]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d10f      	bne.n	8007808 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007808:	2200      	movs	r2, #0
 800780a:	2100      	movs	r1, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f805 	bl	800781c <USBH_CtlReq>
 8007812:	4603      	mov	r3, r0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800782a:	2301      	movs	r3, #1
 800782c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	789b      	ldrb	r3, [r3, #2]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d002      	beq.n	800783c <USBH_CtlReq+0x20>
 8007836:	2b02      	cmp	r3, #2
 8007838:	d00f      	beq.n	800785a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800783a:	e027      	b.n	800788c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	88fa      	ldrh	r2, [r7, #6]
 8007846:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2202      	movs	r2, #2
 8007852:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007854:	2301      	movs	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	e018      	b.n	800788c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f81c 	bl	8007898 <USBH_HandleControl>
 8007860:	4603      	mov	r3, r0
 8007862:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <USBH_CtlReq+0x54>
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d106      	bne.n	800787e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	761a      	strb	r2, [r3, #24]
      break;
 800787c:	e005      	b.n	800788a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d102      	bne.n	800788a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	709a      	strb	r2, [r3, #2]
      break;
 800788a:	bf00      	nop
  }
  return status;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7e1b      	ldrb	r3, [r3, #24]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b0a      	cmp	r3, #10
 80078b0:	f200 8156 	bhi.w	8007b60 <USBH_HandleControl+0x2c8>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBH_HandleControl+0x24>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	08007903 	.word	0x08007903
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	08007993 	.word	0x08007993
 80078cc:	080079cb 	.word	0x080079cb
 80078d0:	080079f5 	.word	0x080079f5
 80078d4:	08007a47 	.word	0x08007a47
 80078d8:	08007a69 	.word	0x08007a69
 80078dc:	08007aa5 	.word	0x08007aa5
 80078e0:	08007acb 	.word	0x08007acb
 80078e4:	08007b09 	.word	0x08007b09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f103 0110 	add.w	r1, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	461a      	mov	r2, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f943 	bl	8007b80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	761a      	strb	r2, [r3, #24]
      break;
 8007900:	e139      	b.n	8007b76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	795b      	ldrb	r3, [r3, #5]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc79 	bl	8008200 <USBH_LL_GetURBState>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d11e      	bne.n	8007956 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7c1b      	ldrb	r3, [r3, #16]
 800791c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007920:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8adb      	ldrh	r3, [r3, #22]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800792a:	7b7b      	ldrb	r3, [r7, #13]
 800792c:	2b80      	cmp	r3, #128	; 0x80
 800792e:	d103      	bne.n	8007938 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2203      	movs	r2, #3
 8007934:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007936:	e115      	b.n	8007b64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2205      	movs	r2, #5
 800793c:	761a      	strb	r2, [r3, #24]
      break;
 800793e:	e111      	b.n	8007b64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007940:	7b7b      	ldrb	r3, [r7, #13]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d103      	bne.n	800794e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2209      	movs	r2, #9
 800794a:	761a      	strb	r2, [r3, #24]
      break;
 800794c:	e10a      	b.n	8007b64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2207      	movs	r2, #7
 8007952:	761a      	strb	r2, [r3, #24]
      break;
 8007954:	e106      	b.n	8007b64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b04      	cmp	r3, #4
 800795a:	d003      	beq.n	8007964 <USBH_HandleControl+0xcc>
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b02      	cmp	r3, #2
 8007960:	f040 8100 	bne.w	8007b64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	220b      	movs	r2, #11
 8007968:	761a      	strb	r2, [r3, #24]
      break;
 800796a:	e0fb      	b.n	8007b64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007972:	b29a      	uxth	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6899      	ldr	r1, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	899a      	ldrh	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	791b      	ldrb	r3, [r3, #4]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f93a 	bl	8007bfe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	761a      	strb	r2, [r3, #24]
      break;
 8007990:	e0f1      	b.n	8007b76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	791b      	ldrb	r3, [r3, #4]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fc31 	bl	8008200 <USBH_LL_GetURBState>
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d102      	bne.n	80079ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2209      	movs	r2, #9
 80079ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	d102      	bne.n	80079ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079b4:	2303      	movs	r3, #3
 80079b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079b8:	e0d6      	b.n	8007b68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b04      	cmp	r3, #4
 80079be:	f040 80d3 	bne.w	8007b68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	220b      	movs	r2, #11
 80079c6:	761a      	strb	r2, [r3, #24]
      break;
 80079c8:	e0ce      	b.n	8007b68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6899      	ldr	r1, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	899a      	ldrh	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	795b      	ldrb	r3, [r3, #5]
 80079d6:	2001      	movs	r0, #1
 80079d8:	9000      	str	r0, [sp, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8ea 	bl	8007bb4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2206      	movs	r2, #6
 80079f0:	761a      	strb	r2, [r3, #24]
      break;
 80079f2:	e0c0      	b.n	8007b76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	795b      	ldrb	r3, [r3, #5]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc00 	bl	8008200 <USBH_LL_GetURBState>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d103      	bne.n	8007a12 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a10:	e0ac      	b.n	8007b6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b05      	cmp	r3, #5
 8007a16:	d105      	bne.n	8007a24 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	220c      	movs	r2, #12
 8007a1c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	73fb      	strb	r3, [r7, #15]
      break;
 8007a22:	e0a3      	b.n	8007b6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d103      	bne.n	8007a32 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2205      	movs	r2, #5
 8007a2e:	761a      	strb	r2, [r3, #24]
      break;
 8007a30:	e09c      	b.n	8007b6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	f040 8099 	bne.w	8007b6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	220b      	movs	r2, #11
 8007a3e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a40:	2302      	movs	r3, #2
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	e092      	b.n	8007b6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8d5 	bl	8007bfe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2208      	movs	r2, #8
 8007a64:	761a      	strb	r2, [r3, #24]

      break;
 8007a66:	e086      	b.n	8007b76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fbc6 	bl	8008200 <USBH_LL_GetURBState>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d105      	bne.n	8007a8a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	220d      	movs	r2, #13
 8007a82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a88:	e072      	b.n	8007b70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d103      	bne.n	8007a98 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	220b      	movs	r2, #11
 8007a94:	761a      	strb	r2, [r3, #24]
      break;
 8007a96:	e06b      	b.n	8007b70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b05      	cmp	r3, #5
 8007a9c:	d168      	bne.n	8007b70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa2:	e065      	b.n	8007b70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	795b      	ldrb	r3, [r3, #5]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	9200      	str	r2, [sp, #0]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f87f 	bl	8007bb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	761a      	strb	r2, [r3, #24]
      break;
 8007ac8:	e055      	b.n	8007b76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb95 	bl	8008200 <USBH_LL_GetURBState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d105      	bne.n	8007aec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	220d      	movs	r2, #13
 8007ae8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007aea:	e043      	b.n	8007b74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d103      	bne.n	8007afa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2209      	movs	r2, #9
 8007af6:	761a      	strb	r2, [r3, #24]
      break;
 8007af8:	e03c      	b.n	8007b74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d139      	bne.n	8007b74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	220b      	movs	r2, #11
 8007b04:	761a      	strb	r2, [r3, #24]
      break;
 8007b06:	e035      	b.n	8007b74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7e5b      	ldrb	r3, [r3, #25]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	765a      	strb	r2, [r3, #25]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7e5b      	ldrb	r3, [r3, #25]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d806      	bhi.n	8007b2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b28:	e025      	b.n	8007b76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b30:	2106      	movs	r1, #6
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	795b      	ldrb	r3, [r3, #5]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f90c 	bl	8007d60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f906 	bl	8007d60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5e:	e00a      	b.n	8007b76 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b60:	bf00      	nop
 8007b62:	e008      	b.n	8007b76 <USBH_HandleControl+0x2de>
      break;
 8007b64:	bf00      	nop
 8007b66:	e006      	b.n	8007b76 <USBH_HandleControl+0x2de>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <USBH_HandleControl+0x2de>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <USBH_HandleControl+0x2de>
      break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <USBH_HandleControl+0x2de>
      break;
 8007b74:	bf00      	nop
  }

  return status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af04      	add	r7, sp, #16
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b8e:	79f9      	ldrb	r1, [r7, #7]
 8007b90:	2300      	movs	r3, #0
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	2308      	movs	r3, #8
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fafa 	bl	800819e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af04      	add	r7, sp, #16
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	80fb      	strh	r3, [r7, #6]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bd8:	7979      	ldrb	r1, [r7, #5]
 8007bda:	7e3b      	ldrb	r3, [r7, #24]
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	2301      	movs	r3, #1
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fad5 	bl	800819e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b088      	sub	sp, #32
 8007c02:	af04      	add	r7, sp, #16
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	80fb      	strh	r3, [r7, #6]
 8007c10:	4613      	mov	r3, r2
 8007c12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c14:	7979      	ldrb	r1, [r7, #5]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9303      	str	r3, [sp, #12]
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	9302      	str	r3, [sp, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	2301      	movs	r3, #1
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	2300      	movs	r3, #0
 8007c28:	2201      	movs	r2, #1
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fab7 	bl	800819e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c30:	2300      	movs	r3, #0

}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af04      	add	r7, sp, #16
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	4611      	mov	r1, r2
 8007c46:	461a      	mov	r2, r3
 8007c48:	460b      	mov	r3, r1
 8007c4a:	80fb      	strh	r3, [r7, #6]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c5e:	7979      	ldrb	r1, [r7, #5]
 8007c60:	7e3b      	ldrb	r3, [r7, #24]
 8007c62:	9303      	str	r3, [sp, #12]
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	9302      	str	r3, [sp, #8]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2302      	movs	r3, #2
 8007c72:	2200      	movs	r2, #0
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fa92 	bl	800819e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af04      	add	r7, sp, #16
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	460b      	mov	r3, r1
 8007c94:	80fb      	strh	r3, [r7, #6]
 8007c96:	4613      	mov	r3, r2
 8007c98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c9a:	7979      	ldrb	r1, [r7, #5]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	9302      	str	r3, [sp, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	2301      	movs	r3, #1
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	2302      	movs	r3, #2
 8007cae:	2201      	movs	r2, #1
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fa74 	bl	800819e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af04      	add	r7, sp, #16
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	70fb      	strb	r3, [r7, #3]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70bb      	strb	r3, [r7, #2]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cda:	7878      	ldrb	r0, [r7, #1]
 8007cdc:	78ba      	ldrb	r2, [r7, #2]
 8007cde:	78f9      	ldrb	r1, [r7, #3]
 8007ce0:	8b3b      	ldrh	r3, [r7, #24]
 8007ce2:	9302      	str	r3, [sp, #8]
 8007ce4:	7d3b      	ldrb	r3, [r7, #20]
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	7c3b      	ldrb	r3, [r7, #16]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4603      	mov	r3, r0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa07 	bl	8008102 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa26 	bl	8008160 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f836 	bl	8007d9c <USBH_GetFreePipe>
 8007d30:	4603      	mov	r3, r0
 8007d32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00a      	beq.n	8007d54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d3e:	78fa      	ldrb	r2, [r7, #3]
 8007d40:	89fb      	ldrh	r3, [r7, #14]
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	33e0      	adds	r3, #224	; 0xe0
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d54:	89fb      	ldrh	r3, [r7, #14]
 8007d56:	b2db      	uxtb	r3, r3
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b0f      	cmp	r3, #15
 8007d70:	d80d      	bhi.n	8007d8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	33e0      	adds	r3, #224	; 0xe0
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	33e0      	adds	r3, #224	; 0xe0
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e00f      	b.n	8007dce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	33e0      	adds	r3, #224	; 0xe0
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	e007      	b.n	8007dd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b0f      	cmp	r3, #15
 8007dd2:	d9ec      	bls.n	8007dae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007de8:	2201      	movs	r2, #1
 8007dea:	490e      	ldr	r1, [pc, #56]	; (8007e24 <MX_USB_HOST_Init+0x40>)
 8007dec:	480e      	ldr	r0, [pc, #56]	; (8007e28 <MX_USB_HOST_Init+0x44>)
 8007dee:	f7ff fb37 	bl	8007460 <USBH_Init>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007df8:	f7f8 fe14 	bl	8000a24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dfc:	490b      	ldr	r1, [pc, #44]	; (8007e2c <MX_USB_HOST_Init+0x48>)
 8007dfe:	480a      	ldr	r0, [pc, #40]	; (8007e28 <MX_USB_HOST_Init+0x44>)
 8007e00:	f7ff fbbc 	bl	800757c <USBH_RegisterClass>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e0a:	f7f8 fe0b 	bl	8000a24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e0e:	4806      	ldr	r0, [pc, #24]	; (8007e28 <MX_USB_HOST_Init+0x44>)
 8007e10:	f7ff fc40 	bl	8007694 <USBH_Start>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e1a:	f7f8 fe03 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e1e:	bf00      	nop
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	08007e31 	.word	0x08007e31
 8007e28:	2000024c 	.word	0x2000024c
 8007e2c:	2000000c 	.word	0x2000000c

08007e30 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d819      	bhi.n	8007e78 <USBH_UserProcess+0x48>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBH_UserProcess+0x1c>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e71 	.word	0x08007e71
 8007e5c:	08007e61 	.word	0x08007e61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e62:	2203      	movs	r2, #3
 8007e64:	701a      	strb	r2, [r3, #0]
  break;
 8007e66:	e008      	b.n	8007e7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e68:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	701a      	strb	r2, [r3, #0]
  break;
 8007e6e:	e004      	b.n	8007e7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
  break;
 8007e76:	e000      	b.n	8007e7a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20000624 	.word	0x20000624

08007e8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	; 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eac:	d147      	bne.n	8007f3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	4a24      	ldr	r2, [pc, #144]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ebe:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4619      	mov	r1, r3
 8007ede:	481b      	ldr	r0, [pc, #108]	; (8007f4c <HAL_HCD_MspInit+0xc0>)
 8007ee0:	f7f9 fe06 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ee4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eea:	2302      	movs	r3, #2
 8007eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ef6:	230a      	movs	r3, #10
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007efa:	f107 0314 	add.w	r3, r7, #20
 8007efe:	4619      	mov	r1, r3
 8007f00:	4812      	ldr	r0, [pc, #72]	; (8007f4c <HAL_HCD_MspInit+0xc0>)
 8007f02:	f7f9 fdf5 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	4a0f      	ldr	r2, [pc, #60]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	6353      	str	r3, [r2, #52]	; 0x34
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f20:	6453      	str	r3, [r2, #68]	; 0x44
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	2043      	movs	r0, #67	; 0x43
 8007f34:	f7f9 fd13 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f38:	2043      	movs	r0, #67	; 0x43
 8007f3a:	f7f9 fd2c 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f3e:	bf00      	nop
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40020000 	.word	0x40020000

08007f50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff fbb7 	bl	80076d2 <USBH_LL_IncTimer>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff fbef 	bl	800775e <USBH_LL_Connect>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fbf8 	bl	800778c <USBH_LL_Disconnect>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fba9 	bl	8007726 <USBH_LL_PortEnabled>
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fba9 	bl	8007742 <USBH_LL_PortDisabled>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008006:	2b01      	cmp	r3, #1
 8008008:	d12a      	bne.n	8008060 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800800a:	4a18      	ldr	r2, [pc, #96]	; (800806c <USBH_LL_Init+0x74>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a15      	ldr	r2, [pc, #84]	; (800806c <USBH_LL_Init+0x74>)
 8008016:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800801a:	4b14      	ldr	r3, [pc, #80]	; (800806c <USBH_LL_Init+0x74>)
 800801c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008020:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <USBH_LL_Init+0x74>)
 8008024:	2208      	movs	r2, #8
 8008026:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <USBH_LL_Init+0x74>)
 800802a:	2201      	movs	r2, #1
 800802c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <USBH_LL_Init+0x74>)
 8008030:	2200      	movs	r2, #0
 8008032:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <USBH_LL_Init+0x74>)
 8008036:	2202      	movs	r2, #2
 8008038:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <USBH_LL_Init+0x74>)
 800803c:	2200      	movs	r2, #0
 800803e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008040:	480a      	ldr	r0, [pc, #40]	; (800806c <USBH_LL_Init+0x74>)
 8008042:	f7f9 ff0a 	bl	8001e5a <HAL_HCD_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800804c:	f7f8 fcea 	bl	8000a24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008050:	4806      	ldr	r0, [pc, #24]	; (800806c <USBH_LL_Init+0x74>)
 8008052:	f7fa fae0 	bl	8002616 <HAL_HCD_GetCurrentFrame>
 8008056:	4603      	mov	r3, r0
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fb2a 	bl	80076b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000628 	.word	0x20000628

08008070 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008086:	4618      	mov	r0, r3
 8008088:	f7fa fa5d 	bl	8002546 <HAL_HCD_Start>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f90e 	bl	80082b4 <USBH_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809c:	7bbb      	ldrb	r3, [r7, #14]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fa fa65 	bl	800258c <HAL_HCD_Stop>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f8f3 	bl	80082b4 <USBH_Get_USB_Status>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fa fa7b 	bl	80025ee <HAL_HCD_HC_GetXferCount>
 80080f8:	4603      	mov	r3, r0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008102:	b590      	push	{r4, r7, lr}
 8008104:	b089      	sub	sp, #36	; 0x24
 8008106:	af04      	add	r7, sp, #16
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	4603      	mov	r3, r0
 8008112:	70fb      	strb	r3, [r7, #3]
 8008114:	460b      	mov	r3, r1
 8008116:	70bb      	strb	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800812a:	787c      	ldrb	r4, [r7, #1]
 800812c:	78ba      	ldrb	r2, [r7, #2]
 800812e:	78f9      	ldrb	r1, [r7, #3]
 8008130:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4623      	mov	r3, r4
 8008142:	f7f9 feec 	bl	8001f1e <HAL_HCD_HC_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8b1 	bl	80082b4 <USBH_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}

08008160 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7f9 ff5c 	bl	800203c <HAL_HCD_HC_Halt>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f892 	bl	80082b4 <USBH_Get_USB_Status>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008194:	7bbb      	ldrb	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800819e:	b590      	push	{r4, r7, lr}
 80081a0:	b089      	sub	sp, #36	; 0x24
 80081a2:	af04      	add	r7, sp, #16
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	461a      	mov	r2, r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	70fb      	strb	r3, [r7, #3]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70bb      	strb	r3, [r7, #2]
 80081b4:	4613      	mov	r3, r2
 80081b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081c6:	787c      	ldrb	r4, [r7, #1]
 80081c8:	78ba      	ldrb	r2, [r7, #2]
 80081ca:	78f9      	ldrb	r1, [r7, #3]
 80081cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081d4:	9302      	str	r3, [sp, #8]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4623      	mov	r3, r4
 80081e2:	f7f9 ff4f 	bl	8002084 <HAL_HCD_HC_SubmitRequest>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 f861 	bl	80082b4 <USBH_Get_USB_Status>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}

08008200 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008212:	78fa      	ldrb	r2, [r7, #3]
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa f9d5 	bl	80025c6 <HAL_HCD_HC_GetURBState>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008238:	2b01      	cmp	r3, #1
 800823a:	d103      	bne.n	8008244 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f864 	bl	800830c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008244:	20c8      	movs	r0, #200	; 0xc8
 8008246:	f7f8 fef1 	bl	800102c <HAL_Delay>
  return USBH_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
 8008260:	4613      	mov	r3, r2
 8008262:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800826a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	212c      	movs	r1, #44	; 0x2c
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	4413      	add	r3, r2
 8008278:	333b      	adds	r3, #59	; 0x3b
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d009      	beq.n	8008294 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	212c      	movs	r1, #44	; 0x2c
 8008286:	fb01 f303 	mul.w	r3, r1, r3
 800828a:	4413      	add	r3, r2
 800828c:	3354      	adds	r3, #84	; 0x54
 800828e:	78ba      	ldrb	r2, [r7, #2]
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e008      	b.n	80082a6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	212c      	movs	r1, #44	; 0x2c
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	4413      	add	r3, r2
 80082a0:	3355      	adds	r3, #85	; 0x55
 80082a2:	78ba      	ldrb	r2, [r7, #2]
 80082a4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d817      	bhi.n	80082f8 <USBH_Get_USB_Status+0x44>
 80082c8:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBH_Get_USB_Status+0x1c>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	080082e1 	.word	0x080082e1
 80082d4:	080082e7 	.word	0x080082e7
 80082d8:	080082ed 	.word	0x080082ed
 80082dc:	080082f3 	.word	0x080082f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
    break;
 80082e4:	e00b      	b.n	80082fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082e6:	2302      	movs	r3, #2
 80082e8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ea:	e008      	b.n	80082fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
    break;
 80082f0:	e005      	b.n	80082fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082f2:	2302      	movs	r3, #2
 80082f4:	73fb      	strb	r3, [r7, #15]
    break;
 80082f6:	e002      	b.n	80082fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082f8:	2302      	movs	r3, #2
 80082fa:	73fb      	strb	r3, [r7, #15]
    break;
 80082fc:	bf00      	nop
  }
  return usb_status;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	e001      	b.n	800832a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	461a      	mov	r2, r3
 800832e:	2101      	movs	r1, #1
 8008330:	4803      	ldr	r0, [pc, #12]	; (8008340 <MX_DriverVbusFS+0x34>)
 8008332:	f7f9 fd79 	bl	8001e28 <HAL_GPIO_WritePin>
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40020800 	.word	0x40020800

08008344 <__errno>:
 8008344:	4b01      	ldr	r3, [pc, #4]	; (800834c <__errno+0x8>)
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	2000002c 	.word	0x2000002c

08008350 <__libc_init_array>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4d0d      	ldr	r5, [pc, #52]	; (8008388 <__libc_init_array+0x38>)
 8008354:	4c0d      	ldr	r4, [pc, #52]	; (800838c <__libc_init_array+0x3c>)
 8008356:	1b64      	subs	r4, r4, r5
 8008358:	10a4      	asrs	r4, r4, #2
 800835a:	2600      	movs	r6, #0
 800835c:	42a6      	cmp	r6, r4
 800835e:	d109      	bne.n	8008374 <__libc_init_array+0x24>
 8008360:	4d0b      	ldr	r5, [pc, #44]	; (8008390 <__libc_init_array+0x40>)
 8008362:	4c0c      	ldr	r4, [pc, #48]	; (8008394 <__libc_init_array+0x44>)
 8008364:	f000 f936 	bl	80085d4 <_init>
 8008368:	1b64      	subs	r4, r4, r5
 800836a:	10a4      	asrs	r4, r4, #2
 800836c:	2600      	movs	r6, #0
 800836e:	42a6      	cmp	r6, r4
 8008370:	d105      	bne.n	800837e <__libc_init_array+0x2e>
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f855 3b04 	ldr.w	r3, [r5], #4
 8008378:	4798      	blx	r3
 800837a:	3601      	adds	r6, #1
 800837c:	e7ee      	b.n	800835c <__libc_init_array+0xc>
 800837e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008382:	4798      	blx	r3
 8008384:	3601      	adds	r6, #1
 8008386:	e7f2      	b.n	800836e <__libc_init_array+0x1e>
 8008388:	08008610 	.word	0x08008610
 800838c:	08008610 	.word	0x08008610
 8008390:	08008610 	.word	0x08008610
 8008394:	08008614 	.word	0x08008614

08008398 <malloc>:
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <malloc+0xc>)
 800839a:	4601      	mov	r1, r0
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f000 b87f 	b.w	80084a0 <_malloc_r>
 80083a2:	bf00      	nop
 80083a4:	2000002c 	.word	0x2000002c

080083a8 <free>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <free+0xc>)
 80083aa:	4601      	mov	r1, r0
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f000 b80b 	b.w	80083c8 <_free_r>
 80083b2:	bf00      	nop
 80083b4:	2000002c 	.word	0x2000002c

080083b8 <memset>:
 80083b8:	4402      	add	r2, r0
 80083ba:	4603      	mov	r3, r0
 80083bc:	4293      	cmp	r3, r2
 80083be:	d100      	bne.n	80083c2 <memset+0xa>
 80083c0:	4770      	bx	lr
 80083c2:	f803 1b01 	strb.w	r1, [r3], #1
 80083c6:	e7f9      	b.n	80083bc <memset+0x4>

080083c8 <_free_r>:
 80083c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ca:	2900      	cmp	r1, #0
 80083cc:	d044      	beq.n	8008458 <_free_r+0x90>
 80083ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d2:	9001      	str	r0, [sp, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f1a1 0404 	sub.w	r4, r1, #4
 80083da:	bfb8      	it	lt
 80083dc:	18e4      	addlt	r4, r4, r3
 80083de:	f000 f8eb 	bl	80085b8 <__malloc_lock>
 80083e2:	4a1e      	ldr	r2, [pc, #120]	; (800845c <_free_r+0x94>)
 80083e4:	9801      	ldr	r0, [sp, #4]
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	b933      	cbnz	r3, 80083f8 <_free_r+0x30>
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	6014      	str	r4, [r2, #0]
 80083ee:	b003      	add	sp, #12
 80083f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083f4:	f000 b8e6 	b.w	80085c4 <__malloc_unlock>
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	d908      	bls.n	800840e <_free_r+0x46>
 80083fc:	6825      	ldr	r5, [r4, #0]
 80083fe:	1961      	adds	r1, r4, r5
 8008400:	428b      	cmp	r3, r1
 8008402:	bf01      	itttt	eq
 8008404:	6819      	ldreq	r1, [r3, #0]
 8008406:	685b      	ldreq	r3, [r3, #4]
 8008408:	1949      	addeq	r1, r1, r5
 800840a:	6021      	streq	r1, [r4, #0]
 800840c:	e7ed      	b.n	80083ea <_free_r+0x22>
 800840e:	461a      	mov	r2, r3
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	b10b      	cbz	r3, 8008418 <_free_r+0x50>
 8008414:	42a3      	cmp	r3, r4
 8008416:	d9fa      	bls.n	800840e <_free_r+0x46>
 8008418:	6811      	ldr	r1, [r2, #0]
 800841a:	1855      	adds	r5, r2, r1
 800841c:	42a5      	cmp	r5, r4
 800841e:	d10b      	bne.n	8008438 <_free_r+0x70>
 8008420:	6824      	ldr	r4, [r4, #0]
 8008422:	4421      	add	r1, r4
 8008424:	1854      	adds	r4, r2, r1
 8008426:	42a3      	cmp	r3, r4
 8008428:	6011      	str	r1, [r2, #0]
 800842a:	d1e0      	bne.n	80083ee <_free_r+0x26>
 800842c:	681c      	ldr	r4, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	6053      	str	r3, [r2, #4]
 8008432:	4421      	add	r1, r4
 8008434:	6011      	str	r1, [r2, #0]
 8008436:	e7da      	b.n	80083ee <_free_r+0x26>
 8008438:	d902      	bls.n	8008440 <_free_r+0x78>
 800843a:	230c      	movs	r3, #12
 800843c:	6003      	str	r3, [r0, #0]
 800843e:	e7d6      	b.n	80083ee <_free_r+0x26>
 8008440:	6825      	ldr	r5, [r4, #0]
 8008442:	1961      	adds	r1, r4, r5
 8008444:	428b      	cmp	r3, r1
 8008446:	bf04      	itt	eq
 8008448:	6819      	ldreq	r1, [r3, #0]
 800844a:	685b      	ldreq	r3, [r3, #4]
 800844c:	6063      	str	r3, [r4, #4]
 800844e:	bf04      	itt	eq
 8008450:	1949      	addeq	r1, r1, r5
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	6054      	str	r4, [r2, #4]
 8008456:	e7ca      	b.n	80083ee <_free_r+0x26>
 8008458:	b003      	add	sp, #12
 800845a:	bd30      	pop	{r4, r5, pc}
 800845c:	2000092c 	.word	0x2000092c

08008460 <sbrk_aligned>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4e0e      	ldr	r6, [pc, #56]	; (800849c <sbrk_aligned+0x3c>)
 8008464:	460c      	mov	r4, r1
 8008466:	6831      	ldr	r1, [r6, #0]
 8008468:	4605      	mov	r5, r0
 800846a:	b911      	cbnz	r1, 8008472 <sbrk_aligned+0x12>
 800846c:	f000 f88c 	bl	8008588 <_sbrk_r>
 8008470:	6030      	str	r0, [r6, #0]
 8008472:	4621      	mov	r1, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f000 f887 	bl	8008588 <_sbrk_r>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d00a      	beq.n	8008494 <sbrk_aligned+0x34>
 800847e:	1cc4      	adds	r4, r0, #3
 8008480:	f024 0403 	bic.w	r4, r4, #3
 8008484:	42a0      	cmp	r0, r4
 8008486:	d007      	beq.n	8008498 <sbrk_aligned+0x38>
 8008488:	1a21      	subs	r1, r4, r0
 800848a:	4628      	mov	r0, r5
 800848c:	f000 f87c 	bl	8008588 <_sbrk_r>
 8008490:	3001      	adds	r0, #1
 8008492:	d101      	bne.n	8008498 <sbrk_aligned+0x38>
 8008494:	f04f 34ff 	mov.w	r4, #4294967295
 8008498:	4620      	mov	r0, r4
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	20000930 	.word	0x20000930

080084a0 <_malloc_r>:
 80084a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a4:	1ccd      	adds	r5, r1, #3
 80084a6:	f025 0503 	bic.w	r5, r5, #3
 80084aa:	3508      	adds	r5, #8
 80084ac:	2d0c      	cmp	r5, #12
 80084ae:	bf38      	it	cc
 80084b0:	250c      	movcc	r5, #12
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	4607      	mov	r7, r0
 80084b6:	db01      	blt.n	80084bc <_malloc_r+0x1c>
 80084b8:	42a9      	cmp	r1, r5
 80084ba:	d905      	bls.n	80084c8 <_malloc_r+0x28>
 80084bc:	230c      	movs	r3, #12
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	2600      	movs	r6, #0
 80084c2:	4630      	mov	r0, r6
 80084c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c8:	4e2e      	ldr	r6, [pc, #184]	; (8008584 <_malloc_r+0xe4>)
 80084ca:	f000 f875 	bl	80085b8 <__malloc_lock>
 80084ce:	6833      	ldr	r3, [r6, #0]
 80084d0:	461c      	mov	r4, r3
 80084d2:	bb34      	cbnz	r4, 8008522 <_malloc_r+0x82>
 80084d4:	4629      	mov	r1, r5
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7ff ffc2 	bl	8008460 <sbrk_aligned>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	4604      	mov	r4, r0
 80084e0:	d14d      	bne.n	800857e <_malloc_r+0xde>
 80084e2:	6834      	ldr	r4, [r6, #0]
 80084e4:	4626      	mov	r6, r4
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	d140      	bne.n	800856c <_malloc_r+0xcc>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	4631      	mov	r1, r6
 80084ee:	4638      	mov	r0, r7
 80084f0:	eb04 0803 	add.w	r8, r4, r3
 80084f4:	f000 f848 	bl	8008588 <_sbrk_r>
 80084f8:	4580      	cmp	r8, r0
 80084fa:	d13a      	bne.n	8008572 <_malloc_r+0xd2>
 80084fc:	6821      	ldr	r1, [r4, #0]
 80084fe:	3503      	adds	r5, #3
 8008500:	1a6d      	subs	r5, r5, r1
 8008502:	f025 0503 	bic.w	r5, r5, #3
 8008506:	3508      	adds	r5, #8
 8008508:	2d0c      	cmp	r5, #12
 800850a:	bf38      	it	cc
 800850c:	250c      	movcc	r5, #12
 800850e:	4629      	mov	r1, r5
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff ffa5 	bl	8008460 <sbrk_aligned>
 8008516:	3001      	adds	r0, #1
 8008518:	d02b      	beq.n	8008572 <_malloc_r+0xd2>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	442b      	add	r3, r5
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	e00e      	b.n	8008540 <_malloc_r+0xa0>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	1b52      	subs	r2, r2, r5
 8008526:	d41e      	bmi.n	8008566 <_malloc_r+0xc6>
 8008528:	2a0b      	cmp	r2, #11
 800852a:	d916      	bls.n	800855a <_malloc_r+0xba>
 800852c:	1961      	adds	r1, r4, r5
 800852e:	42a3      	cmp	r3, r4
 8008530:	6025      	str	r5, [r4, #0]
 8008532:	bf18      	it	ne
 8008534:	6059      	strne	r1, [r3, #4]
 8008536:	6863      	ldr	r3, [r4, #4]
 8008538:	bf08      	it	eq
 800853a:	6031      	streq	r1, [r6, #0]
 800853c:	5162      	str	r2, [r4, r5]
 800853e:	604b      	str	r3, [r1, #4]
 8008540:	4638      	mov	r0, r7
 8008542:	f104 060b 	add.w	r6, r4, #11
 8008546:	f000 f83d 	bl	80085c4 <__malloc_unlock>
 800854a:	f026 0607 	bic.w	r6, r6, #7
 800854e:	1d23      	adds	r3, r4, #4
 8008550:	1af2      	subs	r2, r6, r3
 8008552:	d0b6      	beq.n	80084c2 <_malloc_r+0x22>
 8008554:	1b9b      	subs	r3, r3, r6
 8008556:	50a3      	str	r3, [r4, r2]
 8008558:	e7b3      	b.n	80084c2 <_malloc_r+0x22>
 800855a:	6862      	ldr	r2, [r4, #4]
 800855c:	42a3      	cmp	r3, r4
 800855e:	bf0c      	ite	eq
 8008560:	6032      	streq	r2, [r6, #0]
 8008562:	605a      	strne	r2, [r3, #4]
 8008564:	e7ec      	b.n	8008540 <_malloc_r+0xa0>
 8008566:	4623      	mov	r3, r4
 8008568:	6864      	ldr	r4, [r4, #4]
 800856a:	e7b2      	b.n	80084d2 <_malloc_r+0x32>
 800856c:	4634      	mov	r4, r6
 800856e:	6876      	ldr	r6, [r6, #4]
 8008570:	e7b9      	b.n	80084e6 <_malloc_r+0x46>
 8008572:	230c      	movs	r3, #12
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	4638      	mov	r0, r7
 8008578:	f000 f824 	bl	80085c4 <__malloc_unlock>
 800857c:	e7a1      	b.n	80084c2 <_malloc_r+0x22>
 800857e:	6025      	str	r5, [r4, #0]
 8008580:	e7de      	b.n	8008540 <_malloc_r+0xa0>
 8008582:	bf00      	nop
 8008584:	2000092c 	.word	0x2000092c

08008588 <_sbrk_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4d06      	ldr	r5, [pc, #24]	; (80085a4 <_sbrk_r+0x1c>)
 800858c:	2300      	movs	r3, #0
 800858e:	4604      	mov	r4, r0
 8008590:	4608      	mov	r0, r1
 8008592:	602b      	str	r3, [r5, #0]
 8008594:	f7f8 fc66 	bl	8000e64 <_sbrk>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_sbrk_r+0x1a>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_sbrk_r+0x1a>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	20000934 	.word	0x20000934

080085a8 <strcpy>:
 80085a8:	4603      	mov	r3, r0
 80085aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ae:	f803 2b01 	strb.w	r2, [r3], #1
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	d1f9      	bne.n	80085aa <strcpy+0x2>
 80085b6:	4770      	bx	lr

080085b8 <__malloc_lock>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__malloc_lock+0x8>)
 80085ba:	f000 b809 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 80085be:	bf00      	nop
 80085c0:	20000938 	.word	0x20000938

080085c4 <__malloc_unlock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_unlock+0x8>)
 80085c6:	f000 b804 	b.w	80085d2 <__retarget_lock_release_recursive>
 80085ca:	bf00      	nop
 80085cc:	20000938 	.word	0x20000938

080085d0 <__retarget_lock_acquire_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <__retarget_lock_release_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <_init>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr

080085e0 <_fini>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr
